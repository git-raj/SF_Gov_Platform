-- ====================================================================
-- SECURITY, RISK, QUALITY, CHANGE SCHEMAS
-- ====================================================================

-- ====================================================================
-- SECURITY SCHEMA - POLICIES AND PRIVACY ASSESSMENTS
-- ====================================================================

USE SCHEMA GOV_PLATFORM.SECURITY;

-- Register logical masking policies (Snowflake native policies live elsewhere; this catalogs intent/coverage)
CREATE OR REPLACE TABLE MASKING_POLICY_REGISTRY (
  POLICY_ID       STRING PRIMARY KEY COMMENT='Mask policy id.',
  POLICY_NAME     STRING NOT NULL COMMENT='Descriptive name.',
  POLICY_KIND     STRING COMMENT='STATIC|DYNAMIC.',
  LOGIC_SNIPPET   STRING COMMENT='Pseudocode/SQL for masking rules (not executable).',
  OWNER_PARTY_ID  STRING COMMENT='Policy owner.',
  DESCRIPTION     STRING,
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Catalog of masking policies and their intended logic and scope.';

-- Row access policy registry (logical metadata, not the Snowflake object itself)
CREATE OR REPLACE TABLE ROW_ACCESS_POLICY_REGISTRY (
  POLICY_ID       STRING PRIMARY KEY COMMENT='Row access policy id.',
  POLICY_NAME     STRING NOT NULL COMMENT='Name.',
  SCOPE_DESC      STRING COMMENT='Who sees what (entitlement model).',
  OWNER_PARTY_ID  STRING COMMENT='Policy owner.',
  DESCRIPTION     STRING,
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Catalog of row-level access governance policies.';

-- Privacy Data Protection Impact Assessments (DPIA/PIA) summary
CREATE OR REPLACE TABLE PRIVACY_ASSESSMENT (
  ASSESSMENT_ID   STRING PRIMARY KEY COMMENT='Privacy assessment id.',
  DATASET_ID      STRING COMMENT='Assessed dataset.',
  CLASS_ID        STRING COMMENT='Classification applied.',
  RISK_RATING     STRING COMMENT='HIGH|MEDIUM|LOW.',
  NOTES           STRING COMMENT='Summary of assessment and mitigations.',
  REVIEWED_BY     STRING COMMENT='Reviewer.',
  REVIEWED_AT     TIMESTAMP_TZ COMMENT='Review timestamp.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Privacy assessment records and outcomes.';

-- Exceptions for time-bound access deviations (auditable)
CREATE OR REPLACE TABLE ACCESS_EXCEPTION (
  EXCEPTION_ID    STRING PRIMARY KEY COMMENT='Access exception id.',
  DATASET_ID      STRING COMMENT='Dataset with exception.',
  PARTY_ID        STRING COMMENT='Requester.',
  REASON          STRING COMMENT='Why exception is needed.',
  APPROVED_BY     STRING COMMENT='Approver.',
  EFFECTIVE_FROM  TIMESTAMP_TZ COMMENT='Start time.',
  EFFECTIVE_TO    TIMESTAMP_TZ COMMENT='End time.',
  STATUS          STRING COMMENT='REQUESTED|APPROVED|REVOKED|EXPIRED.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Time-boxed access exceptions with approval trail.';

-- Add foreign key constraints for SECURITY schema
ALTER TABLE MASKING_POLICY_REGISTRY ADD CONSTRAINT FK_MASK_POLICY_OWNER 
  FOREIGN KEY (OWNER_PARTY_ID) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);
ALTER TABLE ROW_ACCESS_POLICY_REGISTRY ADD CONSTRAINT FK_ROW_POLICY_OWNER 
  FOREIGN KEY (OWNER_PARTY_ID) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);
ALTER TABLE PRIVACY_ASSESSMENT ADD CONSTRAINT FK_PRIVACY_DATASET 
  FOREIGN KEY (DATASET_ID) REFERENCES GOV_PLATFORM.CATALOG.DIM_DATASET(DATASET_ID);
ALTER TABLE PRIVACY_ASSESSMENT ADD CONSTRAINT FK_PRIVACY_CLASS 
  FOREIGN KEY (CLASS_ID) REFERENCES GOV_PLATFORM.GOVERNANCE.CLASSIFICATION(CLASS_ID);
ALTER TABLE PRIVACY_ASSESSMENT ADD CONSTRAINT FK_PRIVACY_REVIEWER 
  FOREIGN KEY (REVIEWED_BY) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);
ALTER TABLE ACCESS_EXCEPTION ADD CONSTRAINT FK_EXCEPTION_DATASET 
  FOREIGN KEY (DATASET_ID) REFERENCES GOV_PLATFORM.CATALOG.DIM_DATASET(DATASET_ID);
ALTER TABLE ACCESS_EXCEPTION ADD CONSTRAINT FK_EXCEPTION_PARTY 
  FOREIGN KEY (PARTY_ID) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);
ALTER TABLE ACCESS_EXCEPTION ADD CONSTRAINT FK_EXCEPTION_APPROVER 
  FOREIGN KEY (APPROVED_BY) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);

-- ====================================================================
-- RISK SCHEMA - REGISTER, CONTROLS TESTING, ATTESTATIONS
-- ====================================================================

USE SCHEMA GOV_PLATFORM.RISK;

-- Risk register (SOX/BCBS 239/etc.)
CREATE OR REPLACE TABLE RISK_ITEM (
  RISK_ID         STRING PRIMARY KEY COMMENT='Risk identifier.',
  TITLE           STRING NOT NULL COMMENT='Risk title.',
  DESCRIPTION     STRING COMMENT='Detailed risk description.',
  CATEGORY        STRING COMMENT='Operational|Security|Compliance|DataQuality.',
  SEVERITY        STRING COMMENT='CRITICAL|HIGH|MEDIUM|LOW.',
  LIKELIHOOD      STRING COMMENT='HIGH|MEDIUM|LOW.',
  IMPACT          STRING COMMENT='HIGH|MEDIUM|LOW.',
  OWNER_PARTY_ID  STRING COMMENT='Risk owner.',
  STATUS          STRING COMMENT='OPEN|MITIGATED|ACCEPTED|CLOSED.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Enterprise data risks and status.';

-- Control test results (meta-level; tie to specific runs)
CREATE OR REPLACE TABLE CONTROL_TEST (
  TEST_ID         STRING PRIMARY KEY COMMENT='Control test id.',
  CONTROL_ID      STRING COMMENT='Which control was tested.',
  RUN_ID          STRING COMMENT='Run correlation id (e.g., LINEAGE.PROCESS_RUN.RUN_ID or recon/dq run).',
  EXECUTED_AT     TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP() COMMENT='When test executed.',
  OUTCOME         STRING COMMENT='PASS|FAIL|WARN.',
  DETAILS         STRING COMMENT='Supporting details/metrics.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Outcomes of control tests for auditability.';

-- Attestations (monthly/quarterly certifications)
CREATE OR REPLACE TABLE ATTESTATION (
  ATTESTATION_ID  STRING PRIMARY KEY COMMENT='Attestation id.',
  SCOPE_TYPE      STRING COMMENT='DATASET|DOMAIN|POLICY|CONTROL.',
  SCOPE_ID        STRING COMMENT='Identifier of attested object.',
  PERIOD_START    DATE COMMENT='Certification period start.',
  PERIOD_END      DATE COMMENT='Certification period end.',
  ATTESTOR_PARTY_ID STRING COMMENT='Who attested.',
  STATEMENT       STRING COMMENT='Attestation statement or URL to document.',
  STATUS          STRING COMMENT='SUBMITTED|APPROVED|REJECTED.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Formal attestations for governance reporting and audits.';

-- Add foreign key constraints for RISK schema
ALTER TABLE RISK_ITEM ADD CONSTRAINT FK_RISK_OWNER 
  FOREIGN KEY (OWNER_PARTY_ID) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);
ALTER TABLE CONTROL_TEST ADD CONSTRAINT FK_TEST_CONTROL 
  FOREIGN KEY (CONTROL_ID) REFERENCES GOV_PLATFORM.GOVERNANCE.CONTROL_REGISTRY(CONTROL_ID);
ALTER TABLE ATTESTATION ADD CONSTRAINT FK_ATTESTATION_PARTY 
  FOREIGN KEY (ATTESTOR_PARTY_ID) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);

-- ====================================================================
-- QUALITY SCHEMA - RULE REGISTRY & RESULTS (META LEVEL)
-- ====================================================================

USE SCHEMA GOV_PLATFORM.QUALITY;

-- DQ rule registry (declarative, references datasets/attributes)
CREATE OR REPLACE TABLE DQ_RULE (
  RULE_ID         STRING PRIMARY KEY COMMENT='DQ rule id.',
  RULE_NAME       STRING NOT NULL COMMENT='Name.',
  RULE_TYPE       STRING COMMENT='COMPLETENESS|UNIQUENESS|VALIDITY|CONSISTENCY|ACCURACY|TIMELINESS|SCHEMA_DRIFT.',
  DATASET_ID      STRING COMMENT='Target dataset.',
  COLUMN_NAME     STRING COMMENT='Optional: specific attribute in scope.',
  CONFIG_JSON     VARIANT COMMENT='Parameterization (thresholds, patterns, conditions).',
  SEVERITY        STRING COMMENT='CRITICAL|HIGH|MEDIUM|LOW.',
  OWNER_PARTY_ID  STRING COMMENT='Rule owner.',
  ENABLED_FLAG    BOOLEAN DEFAULT TRUE,
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Central registry of data quality rules with parameters.';

-- DQ run header (meta-level; your evidence stays in GOV_RECON)
CREATE OR REPLACE TABLE DQ_RUN (
  RUN_ID          STRING PRIMARY KEY COMMENT='Run id (may mirror recon/dq engines).',
  STARTED_AT      TIMESTAMP_TZ COMMENT='Run start.',
  ENDED_AT        TIMESTAMP_TZ COMMENT='Run end.',
  ORCHESTRATOR    STRING COMMENT='Airflow|dbt|GreatExpectations|Custom.',
  STATUS          STRING COMMENT='SUCCESS|FAILED|PARTIAL.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Quality run metadata to correlate rule results and dashboards.';

-- DQ result meta (lightweight pointer to evidence and outcome)
CREATE OR REPLACE TABLE DQ_RESULT (
  RUN_ID          STRING COMMENT='Run id.',
  RULE_ID         STRING COMMENT='DQ rule tested.',
  DATASET_ID      STRING COMMENT='Dataset under test.',
  OUTCOME         STRING COMMENT='PASS|FAIL|WARN.',
  METRICS_SUMMARY VARIANT COMMENT='JSON summary of key metrics (for quick slicing).',
  EVIDENCE_REF    STRING COMMENT='Pointer to evidence location (e.g., GOV_RECON.FACT table row key or S3 path).',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ,
  PRIMARY KEY (RUN_ID, RULE_ID)
) COMMENT='Outcome pointer so governance dashboards don''t need raw evidence volume.';

-- Add foreign key constraints for QUALITY schema
ALTER TABLE DQ_RULE ADD CONSTRAINT FK_DQ_RULE_DATASET 
  FOREIGN KEY (DATASET_ID) REFERENCES GOV_PLATFORM.CATALOG.DIM_DATASET(DATASET_ID);
ALTER TABLE DQ_RULE ADD CONSTRAINT FK_DQ_RULE_OWNER 
  FOREIGN KEY (OWNER_PARTY_ID) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);
ALTER TABLE DQ_RESULT ADD CONSTRAINT FK_DQ_RESULT_RUN 
  FOREIGN KEY (RUN_ID) REFERENCES DQ_RUN(RUN_ID);
ALTER TABLE DQ_RESULT ADD CONSTRAINT FK_DQ_RESULT_RULE 
  FOREIGN KEY (RULE_ID) REFERENCES DQ_RULE(RULE_ID);
ALTER TABLE DQ_RESULT ADD CONSTRAINT FK_DQ_RESULT_DATASET 
  FOREIGN KEY (DATASET_ID) REFERENCES GOV_PLATFORM.CATALOG.DIM_DATASET(DATASET_ID);

-- ====================================================================
-- CHANGE SCHEMA - CHANGE REQUESTS, APPROVALS, CERTIFICATIONS
-- ====================================================================

USE SCHEMA GOV_PLATFORM.CHANGE;

-- Change requests against governed assets (schema change, policy change, etc.)
CREATE OR REPLACE TABLE CHANGE_REQUEST (
  CR_ID           STRING PRIMARY KEY COMMENT='Change request id.',
  SCOPE_TYPE      STRING COMMENT='DATASET|TERM|CDE|POLICY|CONTROL|DQ_RULE.',
  SCOPE_ID        STRING COMMENT='Identifier of the target object.',
  TITLE           STRING NOT NULL COMMENT='Short description.',
  DESCRIPTION     STRING COMMENT='Detailed change description and rationale.',
  REQUESTOR_PARTY_ID STRING COMMENT='Requester.',
  STATUS          STRING COMMENT='DRAFT|SUBMITTED|APPROVED|REJECTED|IMPLEMENTED.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Governance change requests with full lifecycle.';

-- Approval events linked to change requests
CREATE OR REPLACE TABLE CHANGE_APPROVAL (
  APPROVAL_ID     STRING PRIMARY KEY COMMENT='Approval id.',
  CR_ID           STRING COMMENT='Related change request.',
  APPROVER_PARTY_ID STRING COMMENT='Approver.',
  DECISION        STRING COMMENT='APPROVE|REJECT|REQUEST_CHANGES.',
  DECIDED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP() COMMENT='Decision time.',
  COMMENTS        STRING COMMENT='Approval comments or conditions.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Approval records for auditability.';

-- Dataset certification lifecycle (Certified, Deprecated, etc.)
CREATE OR REPLACE TABLE CERTIFICATION_EVENT (
  EVENT_ID        STRING PRIMARY KEY COMMENT='Certification event id.',
  DATASET_ID      STRING COMMENT='Dataset being certified.',
  STATUS          STRING COMMENT='CERTIFIED|DEPRECATED|UNDER_REVIEW.',
  REASON          STRING COMMENT='Context for the status change.',
  EFFECTIVE_AT    TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP() COMMENT='When status takes effect.',
  ACTOR_PARTY_ID  STRING COMMENT='Who performed the certification.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Certification events for datasets to drive trust signals in BI tools.';

-- Add foreign key constraints for CHANGE schema
ALTER TABLE CHANGE_REQUEST ADD CONSTRAINT FK_CR_REQUESTOR 
  FOREIGN KEY (REQUESTOR_PARTY_ID) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);
ALTER TABLE CHANGE_APPROVAL ADD CONSTRAINT FK_APPROVAL_CR 
  FOREIGN KEY (CR_ID) REFERENCES CHANGE_REQUEST(CR_ID);
ALTER TABLE CHANGE_APPROVAL ADD CONSTRAINT FK_APPROVAL_PARTY 
  FOREIGN KEY (APPROVER_PARTY_ID) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);
ALTER TABLE CERTIFICATION_EVENT ADD CONSTRAINT FK_CERT_DATASET 
  FOREIGN KEY (DATASET_ID) REFERENCES GOV_PLATFORM.CATALOG.DIM_DATASET(DATASET_ID);
ALTER TABLE CERTIFICATION_EVENT ADD CONSTRAINT FK_CERT_ACTOR 
  FOREIGN KEY (ACTOR_PARTY_ID) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);
