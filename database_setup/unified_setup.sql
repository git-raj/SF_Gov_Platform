-- ====================================================================
-- SNOWFLAKE GOVERNANCE PLATFORM - ONE-TIME DEPLOYMENT SCRIPT 
-- Do Not change, this is a working script.
-- Creates databases, schemas, tables, constraints, and grants in order.
-- Run as a security admin (e.g., ACCOUNTADMIN). Adjust role names as needed.
-- ====================================================================

-- -----------------------------
-- 0) Admin context
-- -----------------------------
USE ROLE ACCOUNTADMIN;

-- -----------------------------
-- 1) Databases
-- -----------------------------
CREATE DATABASE IF NOT EXISTS GOV_PLATFORM COMMENT='Enterprise governance database: catalog, lineage, controls, risk, security, quality, and change mgmt.';

CREATE DATABASE IF NOT EXISTS GOV_APP COMMENT='Governance application layer with secure views and Streamlit app.';

-- -----------------------------
-- 2) Schemas in GOV_PLATFORM
-- -----------------------------
CREATE SCHEMA IF NOT EXISTS GOV_PLATFORM.CATALOG    COMMENT='Authoritative data asset catalog, domains, terms, CDEs, and mappings.';
CREATE SCHEMA IF NOT EXISTS GOV_PLATFORM.OWNERSHIP  COMMENT='Stewardship, ownership, RACI and accountability mappings.';
CREATE SCHEMA IF NOT EXISTS GOV_PLATFORM.GOVERNANCE COMMENT='Controls, policies, data contracts, classifications, retention rules.';
CREATE SCHEMA IF NOT EXISTS GOV_PLATFORM.LINEAGE    COMMENT='Technical & business lineage graph, processes and runs.';
CREATE SCHEMA IF NOT EXISTS GOV_PLATFORM.SECURITY   COMMENT='Masking/row access policy registry, privacy assessments, access exceptions.';
CREATE SCHEMA IF NOT EXISTS GOV_PLATFORM.RISK       COMMENT='Risk register, control tests, attestations.';
CREATE SCHEMA IF NOT EXISTS GOV_PLATFORM.QUALITY    COMMENT='Data quality rule registry and results (meta-level).';
CREATE SCHEMA IF NOT EXISTS GOV_PLATFORM.CHANGE     COMMENT='Change requests, approvals, certifications and releases.';

-- -----------------------------
-- 3) Schemas in GOV_APP
-- -----------------------------
CREATE SCHEMA IF NOT EXISTS GOV_APP.VIEWS   COMMENT='Secure views for governance application access.';
CREATE SCHEMA IF NOT EXISTS GOV_APP.CONFIG  COMMENT='Application configuration, feature flags, and RBAC settings.';
CREATE SCHEMA IF NOT EXISTS GOV_APP.POLICIES COMMENT='Data masking and row access policies.';

-- -----------------------------
-- 4) Role grants for GOV_PLATFORM/GOV_APP
--    Adjust role name GOVERNANCE_ADMIN if your environment differs.
-- -----------------------------
-- Database usage & visibility
GRANT USAGE, MONITOR ON DATABASE GOV_PLATFORM TO ROLE GOVERNANCE_ADMIN;
GRANT USAGE, MONITOR ON DATABASE GOV_APP       TO ROLE GOVERNANCE_ADMIN;

-- Schema usage (current and future) in GOV_PLATFORM
GRANT USAGE ON ALL SCHEMAS IN DATABASE GOV_PLATFORM TO ROLE GOVERNANCE_ADMIN;
GRANT USAGE ON FUTURE SCHEMAS IN DATABASE GOV_PLATFORM TO ROLE GOVERNANCE_ADMIN;

-- Schema usage (current and future) in GOV_APP
GRANT USAGE ON ALL SCHEMAS IN DATABASE GOV_APP TO ROLE GOVERNANCE_ADMIN;
GRANT USAGE ON FUTURE SCHEMAS IN DATABASE GOV_APP TO ROLE GOVERNANCE_ADMIN;

-- Object-level DML privileges (so GOVERNANCE_ADMIN can read/write)
-- Apply to each governance schema now and for future objects.
-- CATALOG
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA GOV_PLATFORM.CATALOG TO ROLE GOVERNANCE_ADMIN;
GRANT SELECT ON ALL VIEWS IN SCHEMA GOV_PLATFORM.CATALOG TO ROLE GOVERNANCE_ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON FUTURE TABLES IN SCHEMA GOV_PLATFORM.CATALOG TO ROLE GOVERNANCE_ADMIN;
GRANT SELECT ON FUTURE VIEWS IN SCHEMA GOV_PLATFORM.CATALOG TO ROLE GOVERNANCE_ADMIN;

-- OWNERSHIP
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA GOV_PLATFORM.OWNERSHIP TO ROLE GOVERNANCE_ADMIN;
GRANT SELECT ON ALL VIEWS IN SCHEMA GOV_PLATFORM.OWNERSHIP TO ROLE GOVERNANCE_ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON FUTURE TABLES IN SCHEMA GOV_PLATFORM.OWNERSHIP TO ROLE GOVERNANCE_ADMIN;
GRANT SELECT ON FUTURE VIEWS IN SCHEMA GOV_PLATFORM.OWNERSHIP TO ROLE GOVERNANCE_ADMIN;

-- GOVERNANCE
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA GOV_PLATFORM.GOVERNANCE TO ROLE GOVERNANCE_ADMIN;
GRANT SELECT ON ALL VIEWS IN SCHEMA GOV_PLATFORM.GOVERNANCE TO ROLE GOVERNANCE_ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON FUTURE TABLES IN SCHEMA GOV_PLATFORM.GOVERNANCE TO ROLE GOVERNANCE_ADMIN;
GRANT SELECT ON FUTURE VIEWS IN SCHEMA GOV_PLATFORM.GOVERNANCE TO ROLE GOVERNANCE_ADMIN;

-- LINEAGE
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA GOV_PLATFORM.LINEAGE TO ROLE GOVERNANCE_ADMIN;
GRANT SELECT ON ALL VIEWS IN SCHEMA GOV_PLATFORM.LINEAGE TO ROLE GOVERNANCE_ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON FUTURE TABLES IN SCHEMA GOV_PLATFORM.LINEAGE TO ROLE GOVERNANCE_ADMIN;
GRANT SELECT ON FUTURE VIEWS IN SCHEMA GOV_PLATFORM.LINEAGE TO ROLE GOVERNANCE_ADMIN;

-- SECURITY
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA GOV_PLATFORM.SECURITY TO ROLE GOVERNANCE_ADMIN;
GRANT SELECT ON ALL VIEWS IN SCHEMA GOV_PLATFORM.SECURITY TO ROLE GOVERNANCE_ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON FUTURE TABLES IN SCHEMA GOV_PLATFORM.SECURITY TO ROLE GOVERNANCE_ADMIN;
GRANT SELECT ON FUTURE VIEWS IN SCHEMA GOV_PLATFORM.SECURITY TO ROLE GOVERNANCE_ADMIN;

-- RISK
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA GOV_PLATFORM.RISK TO ROLE GOVERNANCE_ADMIN;
GRANT SELECT ON ALL VIEWS IN SCHEMA GOV_PLATFORM.RISK TO ROLE GOVERNANCE_ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON FUTURE TABLES IN SCHEMA GOV_PLATFORM.RISK TO ROLE GOVERNANCE_ADMIN;
GRANT SELECT ON FUTURE VIEWS IN SCHEMA GOV_PLATFORM.RISK TO ROLE GOVERNANCE_ADMIN;

-- QUALITY
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA GOV_PLATFORM.QUALITY TO ROLE GOVERNANCE_ADMIN;
GRANT SELECT ON ALL VIEWS IN SCHEMA GOV_PLATFORM.QUALITY TO ROLE GOVERNANCE_ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON FUTURE TABLES IN SCHEMA GOV_PLATFORM.QUALITY TO ROLE GOVERNANCE_ADMIN;
GRANT SELECT ON FUTURE VIEWS IN SCHEMA GOV_PLATFORM.QUALITY TO ROLE GOVERNANCE_ADMIN;

-- CHANGE
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA GOV_PLATFORM.CHANGE TO ROLE GOVERNANCE_ADMIN;
GRANT SELECT ON ALL VIEWS IN SCHEMA GOV_PLATFORM.CHANGE TO ROLE GOVERNANCE_ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON FUTURE TABLES IN SCHEMA GOV_PLATFORM.CHANGE TO ROLE GOVERNANCE_ADMIN;
GRANT SELECT ON FUTURE VIEWS IN SCHEMA GOV_PLATFORM.CHANGE TO ROLE GOVERNANCE_ADMIN;

-- -----------------------------
-- 5) Create objects (as ACCOUNTADMIN to avoid REFERENCES privilege snags)
--    Order matters due to cross-schema foreign keys.
-- -----------------------------

-- ====================================================================
-- CATALOG SCHEMA - DOMAINS, DATASETS, TERMS, CDEs
-- ====================================================================
USE SCHEMA GOV_PLATFORM.CATALOG;

CREATE OR REPLACE TABLE DIM_DOMAIN (
  DOMAIN_ID       STRING PRIMARY KEY COMMENT 'Stable surrogate key for business domain.',
  DOMAIN_NAME     STRING NOT NULL COMMENT 'Human-friendly name of domain, unique.',
  DESCRIPTION     STRING COMMENT 'Narrative description of domain scope.',
  CRITICALITY     STRING COMMENT 'Business criticality (e.g., HIGH/MEDIUM/LOW).',
  OWNER_GROUP     STRING COMMENT 'Primary owning group or product line.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP() COMMENT 'Record creation time.',
  UPDATED_AT      TIMESTAMP_TZ COMMENT 'Last update time.'
) COMMENT='Business domains for grouping datasets and governance scope.';

CREATE OR REPLACE TABLE DIM_SYSTEM (
  SYSTEM_ID       STRING PRIMARY KEY COMMENT 'Stable key for a logical system.',
  SYSTEM_NAME     STRING NOT NULL COMMENT 'System name (unique).',
  SYSTEM_TYPE     STRING COMMENT 'Type/category (Mainframe, SaaS, DB, Stream).',
  OWNER_GROUP     STRING COMMENT 'Owning/operating technology group.',
  DESCRIPTION     STRING COMMENT 'System description and boundaries.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Logical systems that produce or host datasets.';

CREATE OR REPLACE TABLE DIM_DATASET (
  DATASET_ID        STRING PRIMARY KEY COMMENT 'Stable dataset identifier.',
  CATALOG_NAME      STRING COMMENT 'External catalog name, if any (e.g., Collibra asset ID).',
  SYSTEM_ID         STRING COMMENT 'Owning system.',
  DOMAIN_ID         STRING COMMENT 'Owning domain.',
  PLATFORM          STRING COMMENT 'Physical platform (Snowflake, S3, Kafka, Mainframe).',
  DATABASE_NAME     STRING COMMENT 'Physical database/catalog name for Snowflake datasets.',
  SCHEMA_NAME       STRING COMMENT 'Physical schema.',
  OBJECT_NAME       STRING COMMENT 'Table/View/Stream name.',
  OBJECT_TYPE       STRING COMMENT 'TABLE/VIEW/STREAM/EXTERNAL TABLE/etc.',
  DV_LAYER          STRING COMMENT 'Medallion/Vault role (bronze/raw hub/link/sat/business_vault/gold).',
  CLASSIFICATION    STRING COMMENT 'Sensitivity classification (e.g., PII, Confidential).',
  IS_CDE            BOOLEAN DEFAULT FALSE COMMENT 'True if dataset contains one or more critical data elements.',
  DESCRIPTION       STRING COMMENT 'Business description and usage.',
  RETENTION_POLICY_ID STRING COMMENT 'Link to retention policy (GOVERNANCE.RETENTION_POLICY.POLICY_ID).',
  CERTIFICATION     STRING COMMENT 'Certification status (e.g., Certified/Deprecated/Draft).',
  CREATED_AT        TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT        TIMESTAMP_TZ
) COMMENT='Authoritative registry of datasets across the platform with business and technical context.';

CREATE OR REPLACE TABLE DIM_TERM (
  TERM_ID         STRING PRIMARY KEY COMMENT 'Stable key for business term.',
  TERM_NAME       STRING NOT NULL COMMENT 'Business term name (unique).',
  DEFINITION      STRING COMMENT 'Authoritative definition of the term.',
  DOMAIN_ID       STRING COMMENT 'Owning domain.',
  STEWARD_PARTY_ID STRING COMMENT 'Primary steward party (OWNERSHIP.DIM_PARTY.PARTY_ID).',
  STATUS          STRING COMMENT 'Draft/Approved/Deprecated.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Business glossary to standardize definitions.';

CREATE OR REPLACE TABLE DIM_CDE (
  CDE_ID          STRING PRIMARY KEY COMMENT 'Stable key for critical data element.',
  TERM_ID         STRING COMMENT 'Associated glossary term.',
  NAME            STRING NOT NULL COMMENT 'CDE name (often same as term name or attribute).',
  DESCRIPTION     STRING COMMENT 'Context and materiality rationale.',
  MATERIALITY     STRING COMMENT 'Materiality rating (e.g., HIGH/MEDIUM/LOW) for regulatory impact.',
  OWNER_GROUP     STRING COMMENT 'Owning function (e.g., Finance Ops).',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Registry of critical data elements with materiality.';

CREATE OR REPLACE TABLE MAP_DATASET_ATTRIBUTE (
  MAP_ID          STRING PRIMARY KEY COMMENT 'Surrogate key.',
  DATASET_ID      STRING COMMENT 'Dataset containing the attribute.',
  COLUMN_NAME     STRING COMMENT 'Physical column/field name.',
  TERM_ID         STRING COMMENT 'Mapped business term.',
  CDE_ID          STRING COMMENT 'Mapped CDE (optional).',
  SEMANTIC_TYPE   STRING COMMENT 'Declared semantic type (IBAN, SSN, EMAIL, CURRENCY).',
  QUALITY_CRITICAL BOOLEAN DEFAULT FALSE COMMENT 'True if attribute is in scope for DQ SLAs.',
  DESCRIPTION     STRING COMMENT 'Additional notes about the mapping.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Column-level mapping of datasets to glossary terms and CDEs for governance coverage.';

-- FKs inside CATALOG
ALTER TABLE DIM_DATASET ADD CONSTRAINT FK_DATASET_SYSTEM 
  FOREIGN KEY (SYSTEM_ID) REFERENCES DIM_SYSTEM(SYSTEM_ID);
ALTER TABLE DIM_DATASET ADD CONSTRAINT FK_DATASET_DOMAIN 
  FOREIGN KEY (DOMAIN_ID) REFERENCES DIM_DOMAIN(DOMAIN_ID);
ALTER TABLE DIM_TERM ADD CONSTRAINT FK_TERM_DOMAIN 
  FOREIGN KEY (DOMAIN_ID) REFERENCES DIM_DOMAIN(DOMAIN_ID);
ALTER TABLE DIM_CDE ADD CONSTRAINT FK_CDE_TERM 
  FOREIGN KEY (TERM_ID) REFERENCES DIM_TERM(TERM_ID);
ALTER TABLE MAP_DATASET_ATTRIBUTE ADD CONSTRAINT FK_ATTR_DATASET 
  FOREIGN KEY (DATASET_ID) REFERENCES DIM_DATASET(DATASET_ID);
ALTER TABLE MAP_DATASET_ATTRIBUTE ADD CONSTRAINT FK_ATTR_TERM 
  FOREIGN KEY (TERM_ID) REFERENCES DIM_TERM(TERM_ID);
ALTER TABLE MAP_DATASET_ATTRIBUTE ADD CONSTRAINT FK_ATTR_CDE 
  FOREIGN KEY (CDE_ID) REFERENCES DIM_CDE(CDE_ID);

-- ====================================================================
-- OWNERSHIP SCHEMA - PEOPLE/TEAMS, STEWARDSHIP, RACI
-- ====================================================================
USE SCHEMA GOV_PLATFORM.OWNERSHIP;

CREATE OR REPLACE TABLE DIM_PARTY (
  PARTY_ID        STRING PRIMARY KEY COMMENT 'Stable party key.',
  PARTY_TYPE      STRING NOT NULL COMMENT 'PERSON or GROUP.',
  PARTY_NAME      STRING NOT NULL COMMENT 'Display name (user full name or group name).',
  EMAIL           STRING COMMENT 'Contact email for notifications/escalations.',
  MANAGER_PARTY_ID STRING COMMENT 'Manager/group parent party id, if applicable.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='People and groups referenced by ownership and stewardship.';

CREATE OR REPLACE TABLE MAP_DATASET_OWNER (
  MAP_ID          STRING PRIMARY KEY COMMENT 'Surrogate key.',
  DATASET_ID      STRING COMMENT 'Target dataset.',
  PARTY_ID        STRING COMMENT 'Owner/steward party.',
  ROLE_TYPE       STRING COMMENT 'OWNER, STEWARD, CUSTODIAN, PRODUCER, CONSUMER.',
  EFFECTIVE_FROM  TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP() COMMENT 'Start timestamp of responsibility.',
  EFFECTIVE_TO    TIMESTAMP_TZ COMMENT 'End timestamp if superseded.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Dataset ownership/stewardship lifecycle with role types.';

CREATE OR REPLACE TABLE MAP_RACI (
  MAP_ID          STRING PRIMARY KEY COMMENT 'Surrogate key.',
  SCOPE_TYPE      STRING COMMENT 'DATASET|POLICY|CONTROL|TERM|CDE.',
  SCOPE_ID        STRING COMMENT 'Identifier of the governed object (e.g., DATASET_ID).',
  PARTY_ID        STRING COMMENT 'Assigned party.',
  RACI_ROLE       STRING COMMENT 'R|A|C|I.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='RACI matrix across governed scopes to clarify accountability.';

-- FKs for OWNERSHIP
ALTER TABLE DIM_PARTY ADD CONSTRAINT FK_PARTY_MANAGER 
  FOREIGN KEY (MANAGER_PARTY_ID) REFERENCES DIM_PARTY(PARTY_ID);
ALTER TABLE MAP_DATASET_OWNER ADD CONSTRAINT FK_OWNER_DATASET 
  FOREIGN KEY (DATASET_ID) REFERENCES GOV_PLATFORM.CATALOG.DIM_DATASET(DATASET_ID);
ALTER TABLE MAP_DATASET_OWNER ADD CONSTRAINT FK_OWNER_PARTY 
  FOREIGN KEY (PARTY_ID) REFERENCES DIM_PARTY(PARTY_ID);
ALTER TABLE MAP_RACI ADD CONSTRAINT FK_RACI_PARTY 
  FOREIGN KEY (PARTY_ID) REFERENCES DIM_PARTY(PARTY_ID);

-- ====================================================================
-- GOVERNANCE SCHEMA - POLICIES, CONTROLS, CONTRACTS, CLASSIFICATION, RETENTION
-- ====================================================================
USE SCHEMA GOV_PLATFORM.GOVERNANCE;

CREATE OR REPLACE TABLE POLICY_REGISTRY (
  POLICY_ID       STRING PRIMARY KEY COMMENT 'Stable policy id.',
  POLICY_NAME     STRING NOT NULL COMMENT 'Human readable name of the policy.',
  POLICY_TYPE     STRING COMMENT 'RETENTION|CLASSIFICATION|ACCESS|LINEAGE|QUALITY|RECON|SECURITY.',
  VERSION         STRING COMMENT 'Version identifier (e.g., 1.0.0).',
  EFFECTIVE_FROM  DATE COMMENT 'Effective date.',
  EFFECTIVE_TO    DATE COMMENT 'Sunset date (nullable).',
  OWNER_PARTY_ID  STRING COMMENT 'Policy owner.',
  TEXT            STRING COMMENT 'Policy text or reference URI.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Top-level policy definitions used across the platform.';

CREATE OR REPLACE TABLE CONTROL_REGISTRY (
  CONTROL_ID      STRING PRIMARY KEY COMMENT 'Stable control id.',
  CONTROL_NAME    STRING NOT NULL COMMENT 'Name of the control.',
  CONTROL_TYPE    STRING COMMENT 'PREVENTIVE|DETECTIVE|CORRECTIVE.',
  POLICY_ID       STRING COMMENT 'Parent policy.',
  SCOPE_TYPE      STRING COMMENT 'DATASET|PROCESS|PIPELINE|RULE.',
  SCOPE_ID        STRING COMMENT 'Identifier of scope (e.g., DATASET_ID or RULE_ID).',
  DESCRIPTION     STRING COMMENT 'What the control tests or enforces.',
  TOLERANCE_ABS   NUMBER(38,6) COMMENT 'Absolute tolerance for control (if applicable).',
  TOLERANCE_PCT   NUMBER(9,6) COMMENT 'Percentage tolerance for control (if applicable).',
  MATERIALITY_ABS NUMBER(38,6) COMMENT 'Materiality threshold (finance).',
  SEVERITY        STRING COMMENT 'CRITICAL|HIGH|MEDIUM|LOW.',
  OWNER_PARTY_ID  STRING COMMENT 'Control owner.',
  ENABLED_FLAG    BOOLEAN DEFAULT TRUE COMMENT 'Whether the control is active.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Catalog of enforceable controls tied to policies and scopes.';

CREATE OR REPLACE TABLE DATA_CONTRACT (
  CONTRACT_ID     STRING PRIMARY KEY COMMENT 'Stable contract id.',
  DATASET_ID      STRING COMMENT 'Dataset governed by the contract.',
  VERSION         STRING NOT NULL COMMENT 'Contract version.',
  CONTRACT_JSON   VARIANT COMMENT 'JSON contract document (schema, SLAs, delivery guarantees).',
  PRODUCER_PARTY_ID STRING COMMENT 'Producer party.',
  CONSUMER_PARTY_ID STRING COMMENT 'Consumer party (or group).',
  EFFECTIVE_FROM  TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP() COMMENT 'Start time of the version.',
  EFFECTIVE_TO    TIMESTAMP_TZ COMMENT 'End time of the version.',
  STATUS          STRING COMMENT 'DRAFT|ACTIVE|DEPRECATED.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Producer-consumer contracts defining schema, SLAs, quality and delivery expectations.';

CREATE OR REPLACE TABLE CLASSIFICATION (
  CLASS_ID        STRING PRIMARY KEY COMMENT 'Classification id.',
  CLASS_NAME      STRING NOT NULL COMMENT 'PII|PCI|PHI|Confidential|Public etc.',
  DESCRIPTION     STRING COMMENT 'Definition and handling guidance.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Controlled vocabulary for classification labels.';

CREATE OR REPLACE TABLE RETENTION_POLICY (
  POLICY_ID       STRING PRIMARY KEY COMMENT 'Retention policy id.',
  POLICY_NAME     STRING NOT NULL COMMENT 'Name of the retention policy.',
  DURATION_DAYS   NUMBER(10,0) COMMENT 'Retention duration in days.',
  DISPOSITION     STRING COMMENT 'ARCHIVE|PURGE|ANONYMIZE.',
  LEGAL_HOLD_FLAG BOOLEAN DEFAULT FALSE COMMENT 'If true, retention is suspended during holds.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Data retention policies and dispositions.';

-- FKs for GOVERNANCE
ALTER TABLE POLICY_REGISTRY ADD CONSTRAINT FK_POLICY_OWNER 
  FOREIGN KEY (OWNER_PARTY_ID) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);
ALTER TABLE CONTROL_REGISTRY ADD CONSTRAINT FK_CONTROL_POLICY 
  FOREIGN KEY (POLICY_ID) REFERENCES POLICY_REGISTRY(POLICY_ID);
ALTER TABLE CONTROL_REGISTRY ADD CONSTRAINT FK_CONTROL_OWNER 
  FOREIGN KEY (OWNER_PARTY_ID) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);
ALTER TABLE DATA_CONTRACT ADD CONSTRAINT FK_CONTRACT_DATASET 
  FOREIGN KEY (DATASET_ID) REFERENCES GOV_PLATFORM.CATALOG.DIM_DATASET(DATASET_ID);
ALTER TABLE DATA_CONTRACT ADD CONSTRAINT FK_CONTRACT_PRODUCER 
  FOREIGN KEY (PRODUCER_PARTY_ID) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);
ALTER TABLE DATA_CONTRACT ADD CONSTRAINT FK_CONTRACT_CONSUMER 
  FOREIGN KEY (CONSUMER_PARTY_ID) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);

-- ====================================================================
-- LINEAGE SCHEMA - GRAPH, PROCESSES, RUNS
-- ====================================================================
USE SCHEMA GOV_PLATFORM.LINEAGE;

CREATE OR REPLACE TABLE LINEAGE_NODE (
  NODE_ID         STRING PRIMARY KEY COMMENT 'Stable node id (dataset/job/report).',
  NODE_TYPE       STRING NOT NULL COMMENT 'DATASET|JOB|REPORT|API.',
  REF_ID          STRING COMMENT 'Foreign key reference to concrete object (e.g., DATASET_ID or PIPELINE_JOB_ID).',
  NAME            STRING COMMENT 'Display name.',
  DESCRIPTION     STRING COMMENT 'Description/notes.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Vertices in the lineage graph.';

CREATE OR REPLACE TABLE LINEAGE_EDGE (
  EDGE_ID         STRING PRIMARY KEY COMMENT 'Surrogate key.',
  SRC_NODE_ID     STRING COMMENT 'Upstream node id.',
  TGT_NODE_ID     STRING COMMENT 'Downstream node id.',
  EDGE_TYPE       STRING COMMENT 'LOADS|TRANSFORMS|DERIVES|CONSUMES.',
  LOGIC_REF       STRING COMMENT 'Reference to code/SQL or dbt model name/sha.',
  ACTIVE_FLAG     BOOLEAN DEFAULT TRUE COMMENT 'Active edge flag.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Edges (relationships) in the lineage graph.';

CREATE OR REPLACE TABLE PROCESS (
  PROCESS_ID      STRING PRIMARY KEY COMMENT 'Process id (pipeline or job).',
  NAME            STRING NOT NULL COMMENT 'Name of the process.',
  ORCHESTRATOR    STRING COMMENT 'Airflow|Control-M|dbt|Qlik|Informatica|DataStage.',
  PIPELINE_JOB_ID STRING COMMENT 'Link to CATALOG.DIM_PIPELINE_JOB if needed.',
  OWNER_PARTY_ID  STRING COMMENT 'Operational owner.',
  DESCRIPTION     STRING COMMENT 'Process summary.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Registered data processes (pipelines/jobs).';

CREATE OR REPLACE TABLE PROCESS_RUN (
  RUN_ID          STRING PRIMARY KEY COMMENT 'Process run identifier (correlate with recon/dq).',
  PROCESS_ID      STRING COMMENT 'Which process executed.',
  STARTED_AT      TIMESTAMP_TZ COMMENT 'Run start.',
  ENDED_AT        TIMESTAMP_TZ COMMENT 'Run end.',
  STATUS          STRING COMMENT 'SUCCESS|FAILED|PARTIAL.',
  INPUT_SIGNATURE STRING COMMENT 'Hash/signature of inputs.',
  OUTPUT_SIGNATURE STRING COMMENT 'Hash/signature of outputs.',
  TRIGGER_REF     STRING COMMENT 'Triggering event (schedule, file, API).',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Execution history for processes, used by lineage and governance reporting.';

-- FKs for LINEAGE
ALTER TABLE LINEAGE_EDGE ADD CONSTRAINT FK_EDGE_SRC_NODE 
  FOREIGN KEY (SRC_NODE_ID) REFERENCES LINEAGE_NODE(NODE_ID);
ALTER TABLE LINEAGE_EDGE ADD CONSTRAINT FK_EDGE_TGT_NODE 
  FOREIGN KEY (TGT_NODE_ID) REFERENCES LINEAGE_NODE(NODE_ID);
ALTER TABLE PROCESS ADD CONSTRAINT FK_PROCESS_OWNER 
  FOREIGN KEY (OWNER_PARTY_ID) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);
ALTER TABLE PROCESS_RUN ADD CONSTRAINT FK_RUN_PROCESS 
  FOREIGN KEY (PROCESS_ID) REFERENCES PROCESS(PROCESS_ID);

-- ====================================================================
-- SECURITY SCHEMA - POLICIES AND PRIVACY ASSESSMENTS
-- ====================================================================
USE SCHEMA GOV_PLATFORM.SECURITY;

CREATE OR REPLACE TABLE MASKING_POLICY_REGISTRY (
  POLICY_ID       STRING PRIMARY KEY COMMENT 'Mask policy id.',
  POLICY_NAME     STRING NOT NULL COMMENT 'Descriptive name.',
  POLICY_KIND     STRING COMMENT 'STATIC|DYNAMIC.',
  LOGIC_SNIPPET   STRING COMMENT 'Pseudocode/SQL for masking rules (not executable).',
  OWNER_PARTY_ID  STRING COMMENT 'Policy owner.',
  DESCRIPTION     STRING,
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Catalog of masking policies and their intended logic and scope.';

CREATE OR REPLACE TABLE ROW_ACCESS_POLICY_REGISTRY (
  POLICY_ID       STRING PRIMARY KEY COMMENT 'Row access policy id.',
  POLICY_NAME     STRING NOT NULL COMMENT 'Name.',
  SCOPE_DESC      STRING COMMENT 'Who sees what (entitlement model).',
  OWNER_PARTY_ID  STRING COMMENT 'Policy owner.',
  DESCRIPTION     STRING,
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Catalog of row-level access governance policies.';

CREATE OR REPLACE TABLE PRIVACY_ASSESSMENT (
  ASSESSMENT_ID   STRING PRIMARY KEY COMMENT 'Privacy assessment id.',
  DATASET_ID      STRING COMMENT 'Assessed dataset.',
  CLASS_ID        STRING COMMENT 'Classification applied.',
  RISK_RATING     STRING COMMENT 'HIGH|MEDIUM|LOW.',
  NOTES           STRING COMMENT 'Summary of assessment and mitigations.',
  REVIEWED_BY     STRING COMMENT 'Reviewer.',
  REVIEWED_AT     TIMESTAMP_TZ COMMENT 'Review timestamp.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Privacy assessment records and outcomes.';

CREATE OR REPLACE TABLE ACCESS_EXCEPTION (
  EXCEPTION_ID    STRING PRIMARY KEY COMMENT 'Access exception id.',
  DATASET_ID      STRING COMMENT 'Dataset with exception.',
  PARTY_ID        STRING COMMENT 'Requester.',
  REASON          STRING COMMENT 'Why exception is needed.',
  APPROVED_BY     STRING COMMENT 'Approver.',
  EFFECTIVE_FROM  TIMESTAMP_TZ COMMENT 'Start time.',
  EFFECTIVE_TO    TIMESTAMP_TZ COMMENT 'End time.',
  STATUS          STRING COMMENT 'REQUESTED|APPROVED|REVOKED|EXPIRED.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Time-boxed access exceptions with approval trail.';

-- FKs for SECURITY
ALTER TABLE MASKING_POLICY_REGISTRY ADD CONSTRAINT FK_MASK_POLICY_OWNER 
  FOREIGN KEY (OWNER_PARTY_ID) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);
ALTER TABLE ROW_ACCESS_POLICY_REGISTRY ADD CONSTRAINT FK_ROW_POLICY_OWNER 
  FOREIGN KEY (OWNER_PARTY_ID) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);
ALTER TABLE PRIVACY_ASSESSMENT ADD CONSTRAINT FK_PRIVACY_DATASET 
  FOREIGN KEY (DATASET_ID) REFERENCES GOV_PLATFORM.CATALOG.DIM_DATASET(DATASET_ID);
ALTER TABLE PRIVACY_ASSESSMENT ADD CONSTRAINT FK_PRIVACY_CLASS 
  FOREIGN KEY (CLASS_ID) REFERENCES GOV_PLATFORM.GOVERNANCE.CLASSIFICATION(CLASS_ID);
ALTER TABLE PRIVACY_ASSESSMENT ADD CONSTRAINT FK_PRIVACY_REVIEWER 
  FOREIGN KEY (REVIEWED_BY) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);
ALTER TABLE ACCESS_EXCEPTION ADD CONSTRAINT FK_EXCEPTION_DATASET 
  FOREIGN KEY (DATASET_ID) REFERENCES GOV_PLATFORM.CATALOG.DIM_DATASET(DATASET_ID);
ALTER TABLE ACCESS_EXCEPTION ADD CONSTRAINT FK_EXCEPTION_PARTY 
  FOREIGN KEY (PARTY_ID) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);
ALTER TABLE ACCESS_EXCEPTION ADD CONSTRAINT FK_EXCEPTION_APPROVER 
  FOREIGN KEY (APPROVED_BY) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);

-- ====================================================================
-- RISK SCHEMA - REGISTER, CONTROLS TESTING, ATTESTATIONS
-- ====================================================================
USE SCHEMA GOV_PLATFORM.RISK;

CREATE OR REPLACE TABLE RISK_ITEM (
  RISK_ID         STRING PRIMARY KEY COMMENT 'Risk identifier.',
  TITLE           STRING NOT NULL COMMENT 'Risk title.',
  DESCRIPTION     STRING COMMENT 'Detailed risk description.',
  CATEGORY        STRING COMMENT 'Operational|Security|Compliance|DataQuality.',
  SEVERITY        STRING COMMENT 'CRITICAL|HIGH|MEDIUM|LOW.',
  LIKELIHOOD      STRING COMMENT 'HIGH|MEDIUM|LOW.',
  IMPACT          STRING COMMENT 'HIGH|MEDIUM|LOW.',
  OWNER_PARTY_ID  STRING COMMENT 'Risk owner.',
  STATUS          STRING COMMENT 'OPEN|MITIGATED|ACCEPTED|CLOSED.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Enterprise data risks and status.';

CREATE OR REPLACE TABLE CONTROL_TEST (
  TEST_ID         STRING PRIMARY KEY COMMENT 'Control test id.',
  CONTROL_ID      STRING COMMENT 'Which control was tested.',
  RUN_ID          STRING COMMENT 'Run correlation id (e.g., LINEAGE.PROCESS_RUN.RUN_ID or recon/dq run).',
  EXECUTED_AT     TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP() COMMENT 'When test executed.',
  OUTCOME         STRING COMMENT 'PASS|FAIL|WARN.',
  DETAILS         STRING COMMENT 'Supporting details/metrics.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Outcomes of control tests for auditability.';

CREATE OR REPLACE TABLE ATTESTATION (
  ATTESTATION_ID  STRING PRIMARY KEY COMMENT 'Attestation id.',
  SCOPE_TYPE      STRING COMMENT 'DATASET|DOMAIN|POLICY|CONTROL.',
  SCOPE_ID        STRING COMMENT 'Identifier of attested object.',
  PERIOD_START    DATE COMMENT 'Certification period start.',
  PERIOD_END      DATE COMMENT 'Certification period end.',
  ATTESTOR_PARTY_ID STRING COMMENT 'Who attested.',
  STATEMENT       STRING COMMENT 'Attestation statement or URL to document.',
  STATUS          STRING COMMENT 'SUBMITTED|APPROVED|REJECTED.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Formal attestations for governance reporting and audits.';

-- FKs for RISK
ALTER TABLE RISK_ITEM ADD CONSTRAINT FK_RISK_OWNER 
  FOREIGN KEY (OWNER_PARTY_ID) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);
ALTER TABLE CONTROL_TEST ADD CONSTRAINT FK_TEST_CONTROL 
  FOREIGN KEY (CONTROL_ID) REFERENCES GOV_PLATFORM.GOVERNANCE.CONTROL_REGISTRY(CONTROL_ID);
ALTER TABLE ATTESTATION ADD CONSTRAINT FK_ATTESTATION_PARTY 
  FOREIGN KEY (ATTESTOR_PARTY_ID) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);

-- ====================================================================
-- QUALITY SCHEMA - RULE REGISTRY & RESULTS (META LEVEL)
-- ====================================================================
USE SCHEMA GOV_PLATFORM.QUALITY;

CREATE OR REPLACE TABLE DQ_RULE (
  RULE_ID         STRING PRIMARY KEY COMMENT 'DQ rule id.',
  RULE_NAME       STRING NOT NULL COMMENT 'Name.',
  RULE_TYPE       STRING COMMENT 'COMPLETENESS|UNIQUENESS|VALIDITY|CONSISTENCY|ACCURACY|TIMELINESS|SCHEMA_DRIFT.',
  DATASET_ID      STRING COMMENT 'Target dataset.',
  COLUMN_NAME     STRING COMMENT 'Optional: specific attribute in scope.',
  CONFIG_JSON     VARIANT COMMENT 'Parameterization (thresholds, patterns, conditions).',
  SEVERITY        STRING COMMENT 'CRITICAL|HIGH|MEDIUM|LOW.',
  OWNER_PARTY_ID  STRING COMMENT 'Rule owner.',
  ENABLED_FLAG    BOOLEAN DEFAULT TRUE,
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Central registry of data quality rules with parameters.';

CREATE OR REPLACE TABLE DQ_RUN (
  RUN_ID          STRING PRIMARY KEY COMMENT 'Run id (may mirror recon/dq engines).',
  STARTED_AT      TIMESTAMP_TZ COMMENT 'Run start.',
  ENDED_AT        TIMESTAMP_TZ COMMENT 'Run end.',
  ORCHESTRATOR    STRING COMMENT 'Airflow|dbt|GreatExpectations|Custom.',
  STATUS          STRING COMMENT 'SUCCESS|FAILED|PARTIAL.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Quality run metadata to correlate rule results and dashboards.';

CREATE OR REPLACE TABLE DQ_RESULT (
  RUN_ID          STRING COMMENT 'Run id.',
  RULE_ID         STRING COMMENT 'DQ rule tested.',
  DATASET_ID      STRING COMMENT 'Dataset under test.',
  OUTCOME         STRING COMMENT 'PASS|FAIL|WARN.',
  METRICS_SUMMARY VARIANT COMMENT 'JSON summary of key metrics (for quick slicing).',
  EVIDENCE_REF    STRING COMMENT 'Pointer to evidence location (e.g., GOV_RECON.FACT table row key or S3 path).',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ,
  PRIMARY KEY (RUN_ID, RULE_ID)
) COMMENT='Outcome pointer so governance dashboards don''t need raw evidence volume.';

-- FKs for QUALITY
ALTER TABLE DQ_RULE ADD CONSTRAINT FK_DQ_RULE_DATASET 
  FOREIGN KEY (DATASET_ID) REFERENCES GOV_PLATFORM.CATALOG.DIM_DATASET(DATASET_ID);
ALTER TABLE DQ_RULE ADD CONSTRAINT FK_DQ_RULE_OWNER 
  FOREIGN KEY (OWNER_PARTY_ID) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);
ALTER TABLE DQ_RESULT ADD CONSTRAINT FK_DQ_RESULT_RUN 
  FOREIGN KEY (RUN_ID) REFERENCES DQ_RUN(RUN_ID);
ALTER TABLE DQ_RESULT ADD CONSTRAINT FK_DQ_RESULT_RULE 
  FOREIGN KEY (RULE_ID) REFERENCES DQ_RULE(RULE_ID);
ALTER TABLE DQ_RESULT ADD CONSTRAINT FK_DQ_RESULT_DATASET 
  FOREIGN KEY (DATASET_ID) REFERENCES GOV_PLATFORM.CATALOG.DIM_DATASET(DATASET_ID);

-- ====================================================================
-- CHANGE SCHEMA - CHANGE REQUESTS, APPROVALS, CERTIFICATIONS
-- ====================================================================
USE SCHEMA GOV_PLATFORM.CHANGE;

CREATE OR REPLACE TABLE CHANGE_REQUEST (
  CR_ID           STRING PRIMARY KEY COMMENT 'Change request id.',
  SCOPE_TYPE      STRING COMMENT 'DATASET|TERM|CDE|POLICY|CONTROL|DQ_RULE.',
  SCOPE_ID        STRING COMMENT 'Identifier of the target object.',
  TITLE           STRING NOT NULL COMMENT 'Short description.',
  DESCRIPTION     STRING COMMENT 'Detailed change description and rationale.',
  REQUESTOR_PARTY_ID STRING COMMENT 'Requester.',
  STATUS          STRING COMMENT 'DRAFT|SUBMITTED|APPROVED|REJECTED|IMPLEMENTED.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Governance change requests with full lifecycle.';

CREATE OR REPLACE TABLE CHANGE_APPROVAL (
  APPROVAL_ID     STRING PRIMARY KEY COMMENT 'Approval id.',
  CR_ID           STRING COMMENT 'Related change request.',
  APPROVER_PARTY_ID STRING COMMENT 'Approver.',
  DECISION        STRING COMMENT 'APPROVE|REJECT|REQUEST_CHANGES.',
  DECIDED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP() COMMENT 'Decision time.',
  COMMENTS        STRING COMMENT 'Approval comments or conditions.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Approval records for auditability.';

CREATE OR REPLACE TABLE CERTIFICATION_EVENT (
  EVENT_ID        STRING PRIMARY KEY COMMENT 'Certification event id.',
  DATASET_ID      STRING COMMENT 'Dataset being certified.',
  STATUS          STRING COMMENT 'CERTIFIED|DEPRECATED|UNDER_REVIEW.',
  REASON          STRING COMMENT 'Context for the status change.',
  EFFECTIVE_AT    TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP() COMMENT 'When status takes effect.',
  ACTOR_PARTY_ID  STRING COMMENT 'Who performed the certification.',
  CREATED_AT      TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT      TIMESTAMP_TZ
) COMMENT='Certification events for datasets to drive trust signals in BI tools.';

-- FKs for CHANGE
ALTER TABLE CHANGE_REQUEST ADD CONSTRAINT FK_CR_REQUESTOR 
  FOREIGN KEY (REQUESTOR_PARTY_ID) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);
ALTER TABLE CHANGE_APPROVAL ADD CONSTRAINT FK_APPROVAL_CR 
  FOREIGN KEY (CR_ID) REFERENCES CHANGE_REQUEST(CR_ID);
ALTER TABLE CHANGE_APPROVAL ADD CONSTRAINT FK_APPROVAL_PARTY 
  FOREIGN KEY (APPROVER_PARTY_ID) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);
ALTER TABLE CERTIFICATION_EVENT ADD CONSTRAINT FK_CERT_DATASET 
  FOREIGN KEY (DATASET_ID) REFERENCES GOV_PLATFORM.CATALOG.DIM_DATASET(DATASET_ID);
ALTER TABLE CERTIFICATION_EVENT ADD CONSTRAINT FK_CERT_ACTOR 
  FOREIGN KEY (ACTOR_PARTY_ID) REFERENCES GOV_PLATFORM.OWNERSHIP.DIM_PARTY(PARTY_ID);

-- -----------------------------
-- 6) Optional: set a friendlier working context for day-to-day use
-- -----------------------------
USE ROLE GOVERNANCE_ADMIN;
USE DATABASE GOV_PLATFORM;
USE SCHEMA GOV_PLATFORM.CATALOG;

-- End of script

