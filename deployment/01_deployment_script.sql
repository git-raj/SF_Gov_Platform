-- ====================================================================
-- DEPLOYMENT SCRIPT FOR SNOWFLAKE GOVERNANCE PLATFORM
-- ====================================================================
-- Complete deployment script with proper sequencing and dependencies

-- Set context
USE ROLE ACCOUNTADMIN;

-- Create dedicated warehouse for governance operations
CREATE WAREHOUSE IF NOT EXISTS GOVERNANCE_APP_WH
WITH WAREHOUSE_SIZE = 'SMALL'
     AUTO_SUSPEND = 60
     AUTO_RESUME = TRUE
     MIN_CLUSTER_COUNT = 1
     MAX_CLUSTER_COUNT = 3
     SCALING_POLICY = 'STANDARD'
COMMENT = 'Dedicated warehouse for governance platform operations';

-- Create governance roles
CREATE ROLE IF NOT EXISTS GOVERNANCE_ADMIN COMMENT = 'Full governance platform administration';
CREATE ROLE IF NOT EXISTS DATA_STEWARD COMMENT = 'Data stewardship and quality management';
CREATE ROLE IF NOT EXISTS GOVERNANCE_ANALYST COMMENT = 'Read-only governance analysis';
CREATE ROLE IF NOT EXISTS AUDIT_ROLE COMMENT = 'Audit and compliance access';
CREATE ROLE IF NOT EXISTS RISK_MANAGER COMMENT = 'Risk management focused access';

-- Grant role hierarchy
GRANT ROLE GOVERNANCE_ANALYST TO ROLE DATA_STEWARD;
GRANT ROLE DATA_STEWARD TO ROLE GOVERNANCE_ADMIN;
GRANT ROLE RISK_MANAGER TO ROLE GOVERNANCE_ADMIN;
GRANT ROLE AUDIT_ROLE TO ROLE GOVERNANCE_ADMIN;

-- Grant warehouse usage
GRANT USAGE ON WAREHOUSE GOVERNANCE_APP_WH TO ROLE GOVERNANCE_ADMIN;
GRANT USAGE ON WAREHOUSE GOVERNANCE_APP_WH TO ROLE DATA_STEWARD;
GRANT USAGE ON WAREHOUSE GOVERNANCE_APP_WH TO ROLE GOVERNANCE_ANALYST;
GRANT USAGE ON WAREHOUSE GOVERNANCE_APP_WH TO ROLE AUDIT_ROLE;
GRANT USAGE ON WAREHOUSE GOVERNANCE_APP_WH TO ROLE RISK_MANAGER;

-- Create databases and schemas (if not exists from previous scripts)
CREATE DATABASE IF NOT EXISTS GOV_PLATFORM COMMENT='Enterprise governance database';
CREATE DATABASE IF NOT EXISTS GOV_APP COMMENT='Governance application layer';

-- Grant database permissions
GRANT OWNERSHIP ON DATABASE GOV_PLATFORM TO ROLE GOVERNANCE_ADMIN REVOKE CURRENT GRANTS;
GRANT OWNERSHIP ON DATABASE GOV_APP TO ROLE GOVERNANCE_ADMIN REVOKE CURRENT GRANTS;

GRANT USAGE ON DATABASE GOV_PLATFORM TO ROLE DATA_STEWARD;
GRANT USAGE ON DATABASE GOV_PLATFORM TO ROLE GOVERNANCE_ANALYST;
GRANT USAGE ON DATABASE GOV_PLATFORM TO ROLE AUDIT_ROLE;
GRANT USAGE ON DATABASE GOV_PLATFORM TO ROLE RISK_MANAGER;

GRANT USAGE ON DATABASE GOV_APP TO ROLE DATA_STEWARD;
GRANT USAGE ON DATABASE GOV_APP TO ROLE GOVERNANCE_ANALYST;
GRANT USAGE ON DATABASE GOV_APP TO ROLE AUDIT_ROLE;
GRANT USAGE ON DATABASE GOV_APP TO ROLE RISK_MANAGER;

-- Grant schema permissions
GRANT USAGE ON ALL SCHEMAS IN DATABASE GOV_PLATFORM TO ROLE DATA_STEWARD;
GRANT USAGE ON ALL SCHEMAS IN DATABASE GOV_PLATFORM TO ROLE GOVERNANCE_ANALYST;
GRANT USAGE ON ALL SCHEMAS IN DATABASE GOV_PLATFORM TO ROLE AUDIT_ROLE;
GRANT USAGE ON ALL SCHEMAS IN DATABASE GOV_PLATFORM TO ROLE RISK_MANAGER;

GRANT USAGE ON ALL SCHEMAS IN DATABASE GOV_APP TO ROLE DATA_STEWARD;
GRANT USAGE ON ALL SCHEMAS IN DATABASE GOV_APP TO ROLE GOVERNANCE_ANALYST;
GRANT USAGE ON ALL SCHEMAS IN DATABASE GOV_APP TO ROLE AUDIT_ROLE;
GRANT USAGE ON ALL SCHEMAS IN DATABASE GOV_APP TO ROLE RISK_MANAGER;

-- Grant table permissions
-- GOVERNANCE_ADMIN gets full access
GRANT ALL PRIVILEGES ON ALL TABLES IN DATABASE GOV_PLATFORM TO ROLE GOVERNANCE_ADMIN;
GRANT ALL PRIVILEGES ON ALL VIEWS IN DATABASE GOV_PLATFORM TO ROLE GOVERNANCE_ADMIN;
GRANT ALL PRIVILEGES ON ALL TABLES IN DATABASE GOV_APP TO ROLE GOVERNANCE_ADMIN;
GRANT ALL PRIVILEGES ON ALL VIEWS IN DATABASE GOV_APP TO ROLE GOVERNANCE_ADMIN;

-- DATA_STEWARD gets read/write on most tables
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA GOV_PLATFORM.CATALOG TO ROLE DATA_STEWARD;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA GOV_PLATFORM.OWNERSHIP TO ROLE DATA_STEWARD;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA GOV_PLATFORM.QUALITY TO ROLE DATA_STEWARD;
GRANT SELECT ON ALL TABLES IN SCHEMA GOV_PLATFORM.GOVERNANCE TO ROLE DATA_STEWARD;
GRANT SELECT ON ALL TABLES IN SCHEMA GOV_PLATFORM.LINEAGE TO ROLE DATA_STEWARD;
GRANT SELECT ON ALL VIEWS IN DATABASE GOV_APP TO ROLE DATA_STEWARD;

-- GOVERNANCE_ANALYST gets read-only access
GRANT SELECT ON ALL TABLES IN DATABASE GOV_PLATFORM TO ROLE GOVERNANCE_ANALYST;
GRANT SELECT ON ALL VIEWS IN DATABASE GOV_APP TO ROLE GOVERNANCE_ANALYST;

-- AUDIT_ROLE gets specific read access
GRANT SELECT ON ALL TABLES IN SCHEMA GOV_PLATFORM.RISK TO ROLE AUDIT_ROLE;
GRANT SELECT ON ALL TABLES IN SCHEMA GOV_PLATFORM.GOVERNANCE TO ROLE AUDIT_ROLE;
GRANT SELECT ON ALL TABLES IN SCHEMA GOV_PLATFORM.SECURITY TO ROLE AUDIT_ROLE;
GRANT SELECT ON ALL TABLES IN SCHEMA GOV_PLATFORM.CHANGE TO ROLE AUDIT_ROLE;
GRANT SELECT ON ALL VIEWS IN DATABASE GOV_APP TO ROLE AUDIT_ROLE;

-- RISK_MANAGER gets risk-focused access
GRANT SELECT ON ALL TABLES IN SCHEMA GOV_PLATFORM.RISK TO ROLE RISK_MANAGER;
GRANT SELECT, INSERT, UPDATE ON ALL TABLES IN SCHEMA GOV_PLATFORM.RISK TO ROLE RISK_MANAGER;
GRANT SELECT ON ALL TABLES IN SCHEMA GOV_PLATFORM.GOVERNANCE TO ROLE RISK_MANAGER;
GRANT SELECT ON ALL VIEWS IN DATABASE GOV_APP TO ROLE RISK_MANAGER;

-- Grant future privileges
GRANT ALL PRIVILEGES ON FUTURE TABLES IN DATABASE GOV_PLATFORM TO ROLE GOVERNANCE_ADMIN;
GRANT ALL PRIVILEGES ON FUTURE VIEWS IN DATABASE GOV_PLATFORM TO ROLE GOVERNANCE_ADMIN;
GRANT ALL PRIVILEGES ON FUTURE TABLES IN DATABASE GOV_APP TO ROLE GOVERNANCE_ADMIN;
GRANT ALL PRIVILEGES ON FUTURE VIEWS IN DATABASE GOV_APP TO ROLE GOVERNANCE_ADMIN;

GRANT SELECT ON FUTURE TABLES IN DATABASE GOV_PLATFORM TO ROLE GOVERNANCE_ANALYST;
GRANT SELECT ON FUTURE VIEWS IN DATABASE GOV_APP TO ROLE GOVERNANCE_ANALYST;

-- Create internal stage for Streamlit app
USE DATABASE GOV_APP;
CREATE STAGE IF NOT EXISTS STREAMLIT_STAGE 
DIRECTORY = (ENABLE = TRUE) 
COMMENT = 'Internal stage for Streamlit application files';

GRANT READ, WRITE ON STAGE STREAMLIT_STAGE TO ROLE GOVERNANCE_ADMIN;

-- Set up task for automated maintenance (optional)
USE ROLE GOVERNANCE_ADMIN;
USE DATABASE GOV_PLATFORM;

CREATE OR REPLACE TASK GOVERNANCE_MAINTENANCE_TASK
    WAREHOUSE = GOVERNANCE_APP_WH
    SCHEDULE = 'USING CRON 0 2 * * * UTC' -- Daily at 2 AM UTC
    COMMENT = 'Daily maintenance task for governance platform'
AS
$$
BEGIN
    -- Update dataset statistics
    UPDATE GOV_PLATFORM.CATALOG.DIM_DATASET 
    SET UPDATED_AT = CURRENT_TIMESTAMP() 
    WHERE UPDATED_AT < DATEADD('day', -1, CURRENT_TIMESTAMP());
    
    -- Clean up old telemetry data (keep 90 days)
    DELETE FROM GOV_APP.CONFIG.APP_TELEMETRY 
    WHERE CREATED_AT < DATEADD('day', -90, CURRENT_TIMESTAMP());
    
    -- Log maintenance completion
    INSERT INTO GOV_APP.CONFIG.APP_TELEMETRY 
    (SESSION_ID, USER_NAME, ROLE_NAME, PAGE_NAME, ACTION, TIMESTAMP_TZ)
    VALUES 
    (UUID_STRING(), 'SYSTEM', 'GOVERNANCE_ADMIN', 'MAINTENANCE', 'DAILY_CLEANUP', CURRENT_TIMESTAMP());
END;
$$;

-- Resume the task
ALTER TASK GOVERNANCE_MAINTENANCE_TASK RESUME;

COMMIT;
