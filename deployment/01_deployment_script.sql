-- ====================================================================
-- DEPLOYMENT SCRIPT FOR SNOWFLAKE GOVERNANCE PLATFORM (FIXED)
-- This script works, do not change anything.
-- ====================================================================

-- Bootstrap with an admin role
USE ROLE ACCOUNTADMIN;

-- 0) Create (or ensure) the dedicated warehouse
CREATE WAREHOUSE IF NOT EXISTS GOVERNANCE_APP_WH
  WAREHOUSE_SIZE = 'X-SMALL'
  AUTO_SUSPEND = 60
  AUTO_RESUME = TRUE
  MIN_CLUSTER_COUNT = 1
  MAX_CLUSTER_COUNT = 3
  SCALING_POLICY = 'STANDARD'
  COMMENT = 'Dedicated warehouse for governance platform operations';

-- 1) Roles
CREATE ROLE IF NOT EXISTS GOVERNANCE_ADMIN         COMMENT = 'Full governance platform administration';
CREATE ROLE IF NOT EXISTS DATA_STEWARD             COMMENT = 'Data stewardship and quality management';
CREATE ROLE IF NOT EXISTS GOVERNANCE_ANALYST       COMMENT = 'Read-only governance analysis';
CREATE ROLE IF NOT EXISTS AUDIT_ROLE               COMMENT = 'Audit and compliance access';
CREATE ROLE IF NOT EXISTS RISK_MANAGER             COMMENT = 'Risk management focused access';

-- Role hierarchy
GRANT ROLE GOVERNANCE_ANALYST  TO ROLE DATA_STEWARD;
GRANT ROLE DATA_STEWARD        TO ROLE GOVERNANCE_ADMIN;
GRANT ROLE RISK_MANAGER        TO ROLE GOVERNANCE_ADMIN;
GRANT ROLE AUDIT_ROLE          TO ROLE GOVERNANCE_ADMIN;

-- Assign the app admin role to the deploying user
GRANT ROLE GOVERNANCE_ADMIN TO USER RAJ;

-- 2) Databases (create if missing)
CREATE DATABASE IF NOT EXISTS GOV_PLATFORM COMMENT='Enterprise governance database';
CREATE DATABASE IF NOT EXISTS GOV_APP      COMMENT='Governance application layer';

-- 3) Transfer OWNERSHIP of DBs to app admin (keep current access during the run)
GRANT OWNERSHIP ON DATABASE GOV_PLATFORM TO ROLE GOVERNANCE_ADMIN COPY CURRENT GRANTS;
GRANT OWNERSHIP ON DATABASE GOV_APP      TO ROLE GOVERNANCE_ADMIN COPY CURRENT GRANTS;

-- 4) Warehouse usage grants (must be done by warehouse owner / admin)
GRANT USAGE ON WAREHOUSE GOVERNANCE_APP_WH TO ROLE GOVERNANCE_ADMIN;
GRANT USAGE ON WAREHOUSE GOVERNANCE_APP_WH TO ROLE DATA_STEWARD;
GRANT USAGE ON WAREHOUSE GOVERNANCE_APP_WH TO ROLE GOVERNANCE_ANALYST;
GRANT USAGE ON WAREHOUSE GOVERNANCE_APP_WH TO ROLE AUDIT_ROLE;
GRANT USAGE ON WAREHOUSE GOVERNANCE_APP_WH TO ROLE RISK_MANAGER;

-- ====================================================================
-- Switch to app admin to create schemas & app-scoped objects
-- ====================================================================
USE ROLE GOVERNANCE_ADMIN;
USE WAREHOUSE GOVERNANCE_APP_WH;

-- 5) Create platform schemas (adjust list as needed)
USE DATABASE GOV_PLATFORM;

CREATE SCHEMA IF NOT EXISTS CATALOG;
CREATE SCHEMA IF NOT EXISTS OWNERSHIP;
CREATE SCHEMA IF NOT EXISTS QUALITY;
CREATE SCHEMA IF NOT EXISTS GOVERNANCE;
CREATE SCHEMA IF NOT EXISTS LINEAGE;
CREATE SCHEMA IF NOT EXISTS RISK;
CREATE SCHEMA IF NOT EXISTS SECURITY;
CREATE SCHEMA IF NOT EXISTS CHANGE;
CREATE SCHEMA IF NOT EXISTS OPERATIONS;

-- 6) Create app-layer schemas
USE DATABASE GOV_APP;

CREATE SCHEMA IF NOT EXISTS CONFIG;
CREATE SCHEMA IF NOT EXISTS APP;

-- 7) Database & schema usage grants to non-admin roles (as DB owner)
-- GOV_PLATFORM
GRANT USAGE ON DATABASE GOV_PLATFORM TO ROLE DATA_STEWARD;
GRANT USAGE ON DATABASE GOV_PLATFORM TO ROLE GOVERNANCE_ANALYST;
GRANT USAGE ON DATABASE GOV_PLATFORM TO ROLE AUDIT_ROLE;
GRANT USAGE ON DATABASE GOV_PLATFORM TO ROLE RISK_MANAGER;
GRANT USAGE ON ALL SCHEMAS IN DATABASE GOV_PLATFORM TO ROLE DATA_STEWARD;
GRANT USAGE ON ALL SCHEMAS IN DATABASE GOV_PLATFORM TO ROLE GOVERNANCE_ANALYST;
GRANT USAGE ON ALL SCHEMAS IN DATABASE GOV_PLATFORM TO ROLE AUDIT_ROLE;
GRANT USAGE ON ALL SCHEMAS IN DATABASE GOV_PLATFORM TO ROLE RISK_MANAGER;

-- GOV_APP
GRANT USAGE ON DATABASE GOV_APP TO ROLE DATA_STEWARD;
GRANT USAGE ON DATABASE GOV_APP TO ROLE GOVERNANCE_ANALYST;
GRANT USAGE ON DATABASE GOV_APP TO ROLE AUDIT_ROLE;
GRANT USAGE ON DATABASE GOV_APP TO ROLE RISK_MANAGER;
GRANT USAGE ON ALL SCHEMAS IN DATABASE GOV_APP TO ROLE DATA_STEWARD;
GRANT USAGE ON ALL SCHEMAS IN DATABASE GOV_APP TO ROLE GOVERNANCE_ANALYST;
GRANT USAGE ON ALL SCHEMAS IN DATABASE GOV_APP TO ROLE AUDIT_ROLE;
GRANT USAGE ON ALL SCHEMAS IN DATABASE GOV_APP TO ROLE RISK_MANAGER;

-- 8) Table/View privileges (existing objects)
-- Admin full access across both DBs
GRANT ALL PRIVILEGES ON ALL TABLES IN DATABASE GOV_PLATFORM TO ROLE GOVERNANCE_ADMIN;
GRANT ALL PRIVILEGES ON ALL VIEWS  IN DATABASE GOV_PLATFORM TO ROLE GOVERNANCE_ADMIN;
GRANT ALL PRIVILEGES ON ALL TABLES IN DATABASE GOV_APP      TO ROLE GOVERNANCE_ADMIN;
GRANT ALL PRIVILEGES ON ALL VIEWS  IN DATABASE GOV_APP      TO ROLE GOVERNANCE_ADMIN;

-- Data steward scoped rights
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA GOV_PLATFORM.CATALOG    TO ROLE DATA_STEWARD;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA GOV_PLATFORM.OWNERSHIP  TO ROLE DATA_STEWARD;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA GOV_PLATFORM.QUALITY    TO ROLE DATA_STEWARD;
GRANT SELECT ON ALL TABLES IN SCHEMA GOV_PLATFORM.GOVERNANCE TO ROLE DATA_STEWARD;
GRANT SELECT ON ALL TABLES IN SCHEMA GOV_PLATFORM.LINEAGE    TO ROLE DATA_STEWARD;
GRANT SELECT ON ALL VIEWS  IN DATABASE GOV_APP               TO ROLE DATA_STEWARD;

-- Analyst (read-only)
GRANT SELECT ON ALL TABLES IN DATABASE GOV_PLATFORM TO ROLE GOVERNANCE_ANALYST;
GRANT SELECT ON ALL VIEWS  IN DATABASE GOV_APP      TO ROLE GOVERNANCE_ANALYST;

-- Audit (targeted read)
GRANT SELECT ON ALL TABLES IN SCHEMA GOV_PLATFORM.RISK        TO ROLE AUDIT_ROLE;
GRANT SELECT ON ALL TABLES IN SCHEMA GOV_PLATFORM.GOVERNANCE  TO ROLE AUDIT_ROLE;
GRANT SELECT ON ALL TABLES IN SCHEMA GOV_PLATFORM.SECURITY    TO ROLE AUDIT_ROLE;
GRANT SELECT ON ALL TABLES IN SCHEMA GOV_PLATFORM.CHANGE      TO ROLE AUDIT_ROLE;
GRANT SELECT ON ALL VIEWS  IN DATABASE GOV_APP                TO ROLE AUDIT_ROLE;

-- Risk manager
GRANT SELECT ON ALL TABLES IN SCHEMA GOV_PLATFORM.RISK TO ROLE RISK_MANAGER;
GRANT SELECT, INSERT, UPDATE ON ALL TABLES IN SCHEMA GOV_PLATFORM.RISK TO ROLE RISK_MANAGER;
GRANT SELECT ON ALL TABLES IN SCHEMA GOV_PLATFORM.GOVERNANCE  TO ROLE RISK_MANAGER;
GRANT SELECT ON ALL VIEWS  IN DATABASE GOV_APP                TO ROLE RISK_MANAGER;

-- 9) Future grants (make new objects inherit)
GRANT ALL PRIVILEGES ON FUTURE TABLES IN DATABASE GOV_PLATFORM TO ROLE GOVERNANCE_ADMIN;
GRANT ALL PRIVILEGES ON FUTURE VIEWS  IN DATABASE GOV_PLATFORM TO ROLE GOVERNANCE_ADMIN;
GRANT ALL PRIVILEGES ON FUTURE TABLES IN DATABASE GOV_APP      TO ROLE GOVERNANCE_ADMIN;
GRANT ALL PRIVILEGES ON FUTURE VIEWS  IN DATABASE GOV_APP      TO ROLE GOVERNANCE_ADMIN;

GRANT SELECT ON FUTURE TABLES IN DATABASE GOV_PLATFORM TO ROLE GOVERNANCE_ANALYST;
GRANT SELECT ON FUTURE VIEWS  IN DATABASE GOV_APP      TO ROLE GOVERNANCE_ANALYST;

-- 10) Create internal stage in GOV_APP.APP (avoid PUBLIC)
USE DATABASE GOV_APP;
USE SCHEMA APP;

CREATE STAGE IF NOT EXISTS GOV_APP.APP.STREAMLIT_STAGE
  DIRECTORY = (ENABLE = TRUE)
  COMMENT = 'Internal stage for Streamlit application files';

-- (Optional) allow other roles to access stage contents
-- GRANT READ, WRITE ON STAGE GOV_APP.APP.STREAMLIT_STAGE TO ROLE DATA_STEWARD;

-- 11) Maintenance procedure (multi-statement logic)
USE DATABASE GOV_PLATFORM;
USE SCHEMA OPERATIONS;

-- (Optional) ensure target tables exist or are created elsewhere:
-- CREATE TABLE IF NOT EXISTS GOV_PLATFORM.CATALOG.DIM_DATASET (...);
-- CREATE TABLE IF NOT EXISTS GOV_APP.CONFIG.APP_TELEMETRY (...);

CREATE OR REPLACE PROCEDURE GOV_PLATFORM.OPERATIONS.MAINTENANCE_PROC()
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN
  -- Update dataset statistics
  UPDATE GOV_PLATFORM.CATALOG.DIM_DATASET
  SET UPDATED_AT = CURRENT_TIMESTAMP()
  WHERE UPDATED_AT < DATEADD('day', -1, CURRENT_TIMESTAMP());

  -- Clean old telemetry (keep 90 days)
  DELETE FROM GOV_APP.CONFIG.APP_TELEMETRY
  WHERE CREATED_AT < DATEADD('day', -90, CURRENT_TIMESTAMP());

  -- Log maintenance completion
  INSERT INTO GOV_APP.CONFIG.APP_TELEMETRY
    (SESSION_ID, USER_NAME, ROLE_NAME, PAGE_NAME, ACTION, TIMESTAMP_TZ)
  VALUES
    (UUID_STRING(), 'SYSTEM', 'GOVERNANCE_ADMIN', 'MAINTENANCE', 'DAILY_CLEANUP', CURRENT_TIMESTAMP());

  RETURN 'OK';
END;
$$;

-- 12) Scheduled task that calls the procedure (schema-scoped)
CREATE OR REPLACE TASK GOV_PLATFORM.OPERATIONS.GOVERNANCE_MAINTENANCE_TASK
  WAREHOUSE = GOVERNANCE_APP_WH
  SCHEDULE  = 'USING CRON 0 2 * * * UTC'  -- daily @ 02:00 UTC
  COMMENT   = 'Daily maintenance task for governance platform'
AS
CALL GOV_PLATFORM.OPERATIONS.MAINTENANCE_PROC();

-- Enable the task
ALTER TASK GOV_PLATFORM.OPERATIONS.GOVERNANCE_MAINTENANCE_TASK RESUME;

COMMIT;
