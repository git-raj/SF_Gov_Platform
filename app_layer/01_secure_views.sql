-- ====================================================================
-- GOVERNANCE APPLICATION LAYER - SECURE VIEWS
-- ====================================================================
-- Secure views for the Streamlit governance application

USE SCHEMA GOV_APP.VIEWS;

-- Today's health (per process/day) - denormalized view for dashboard
CREATE OR REPLACE SECURE VIEW VW_TODAY_HEALTH AS
SELECT
  pr.RUN_ID,
  pr.STARTED_AT,
  pr.ENDED_AT,
  pr.STATUS AS RUN_STATUS,
  p.NAME AS PROCESS_NAME,
  p.ORCHESTRATOR,
  d.DOMAIN_NAME,
  ds.DATABASE_NAME,
  ds.SCHEMA_NAME,
  ds.OBJECT_NAME AS TARGET_TABLE,
  ds.CLASSIFICATION,
  ds.CERTIFICATION,
  CASE 
    WHEN pr.STATUS = 'SUCCESS' THEN 'PASS'
    WHEN pr.STATUS = 'FAILED' THEN 'FAIL'
    ELSE 'WARN'
  END AS OUTCOME,
  -- Calculate run duration
  DATEDIFF('minute', pr.STARTED_AT, pr.ENDED_AT) AS DURATION_MINUTES,
  -- Add owner information
  LISTAGG(DISTINCT CASE WHEN mo.ROLE_TYPE = 'OWNER' THEN pt.PARTY_NAME END, ', ') 
    WITHIN GROUP (ORDER BY pt.PARTY_NAME) AS OWNERS
FROM GOV_PLATFORM.LINEAGE.PROCESS_RUN pr
JOIN GOV_PLATFORM.LINEAGE.PROCESS p ON p.PROCESS_ID = pr.PROCESS_ID
LEFT JOIN GOV_PLATFORM.LINEAGE.LINEAGE_NODE ln ON ln.REF_ID = p.PROCESS_ID AND ln.NODE_TYPE = 'JOB'
LEFT JOIN GOV_PLATFORM.LINEAGE.LINEAGE_EDGE le ON le.SRC_NODE_ID = ln.NODE_ID
LEFT JOIN GOV_PLATFORM.LINEAGE.LINEAGE_NODE ln2 ON ln2.NODE_ID = le.TGT_NODE_ID AND ln2.NODE_TYPE = 'DATASET'
LEFT JOIN GOV_PLATFORM.CATALOG.DIM_DATASET ds ON ds.DATASET_ID = ln2.REF_ID
LEFT JOIN GOV_PLATFORM.CATALOG.DIM_DOMAIN d ON d.DOMAIN_ID = ds.DOMAIN_ID
LEFT JOIN GOV_PLATFORM.OWNERSHIP.MAP_DATASET_OWNER mo ON mo.DATASET_ID = ds.DATASET_ID AND mo.EFFECTIVE_TO IS NULL
LEFT JOIN GOV_PLATFORM.OWNERSHIP.DIM_PARTY pt ON pt.PARTY_ID = mo.PARTY_ID
WHERE CAST(pr.STARTED_AT AS DATE) = CURRENT_DATE()
GROUP BY pr.RUN_ID, pr.STARTED_AT, pr.ENDED_AT, pr.STATUS, p.NAME, p.ORCHESTRATOR, 
         d.DOMAIN_NAME, ds.DATABASE_NAME, ds.SCHEMA_NAME, ds.OBJECT_NAME, ds.CLASSIFICATION, ds.CERTIFICATION;

-- Data Quality results with enriched context
CREATE OR REPLACE SECURE VIEW VW_DQ_RESULTS_ENRICHED AS
SELECT
  dr.RUN_ID,
  dr.RULE_ID,
  dr.DATASET_ID,
  dr.OUTCOME,
  dr.METRICS_SUMMARY,
  dr.EVIDENCE_REF,
  dr.CREATED_AT,
  -- Rule information
  dq.RULE_NAME,
  dq.RULE_TYPE,
  dq.COLUMN_NAME,
  dq.SEVERITY,
  dq.CONFIG_JSON,
  -- Dataset information
  ds.DATABASE_NAME,
  ds.SCHEMA_NAME,
  ds.OBJECT_NAME,
  ds.CLASSIFICATION,
  ds.IS_CDE,
  -- Domain and ownership
  d.DOMAIN_NAME,
  d.CRITICALITY AS DOMAIN_CRITICALITY,
  pt.PARTY_NAME AS RULE_OWNER,
  pt.EMAIL AS OWNER_EMAIL,
  -- Run information
  dqr.ORCHESTRATOR,
  dqr.STATUS AS RUN_STATUS
FROM GOV_PLATFORM.QUALITY.DQ_RESULT dr
JOIN GOV_PLATFORM.QUALITY.DQ_RULE dq ON dq.RULE_ID = dr.RULE_ID
JOIN GOV_PLATFORM.QUALITY.DQ_RUN dqr ON dqr.RUN_ID = dr.RUN_ID
JOIN GOV_PLATFORM.CATALOG.DIM_DATASET ds ON ds.DATASET_ID = dr.DATASET_ID
LEFT JOIN GOV_PLATFORM.CATALOG.DIM_DOMAIN d ON d.DOMAIN_ID = ds.DOMAIN_ID
LEFT JOIN GOV_PLATFORM.OWNERSHIP.DIM_PARTY pt ON pt.PARTY_ID = dq.OWNER_PARTY_ID;

-- Control test results with governance context
CREATE OR REPLACE SECURE VIEW VW_CONTROL_RESULTS_ENRICHED AS
SELECT
  ct.TEST_ID,
  ct.CONTROL_ID,
  ct.RUN_ID,
  ct.EXECUTED_AT,
  ct.OUTCOME,
  ct.DETAILS,
  -- Control information
  cr.CONTROL_NAME,
  cr.CONTROL_TYPE,
  cr.SCOPE_TYPE,
  cr.SCOPE_ID,
  cr.DESCRIPTION,
  cr.SEVERITY,
  cr.TOLERANCE_ABS,
  cr.TOLERANCE_PCT,
  cr.MATERIALITY_ABS,
  -- Policy information
  pr.POLICY_NAME,
  pr.POLICY_TYPE,
  -- Owner information
  pt.PARTY_NAME AS CONTROL_OWNER,
  pt.EMAIL AS OWNER_EMAIL
FROM GOV_PLATFORM.RISK.CONTROL_TEST ct
JOIN GOV_PLATFORM.GOVERNANCE.CONTROL_REGISTRY cr ON cr.CONTROL_ID = ct.CONTROL_ID
LEFT JOIN GOV_PLATFORM.GOVERNANCE.POLICY_REGISTRY pr ON pr.POLICY_ID = cr.POLICY_ID
LEFT JOIN GOV_PLATFORM.OWNERSHIP.DIM_PARTY pt ON pt.PARTY_ID = cr.OWNER_PARTY_ID;

-- Dataset ownership view with effective dates
CREATE OR REPLACE SECURE VIEW VW_DATASET_OWNERS AS
SELECT
  ds.DATASET_ID,
  ds.DATABASE_NAME,
  ds.SCHEMA_NAME,
  ds.OBJECT_NAME,
  ds.DESCRIPTION AS DATASET_DESCRIPTION,
  d.DOMAIN_NAME,
  -- Current owners (effective now)
  LISTAGG(DISTINCT CASE WHEN mo.ROLE_TYPE = 'OWNER' AND (mo.EFFECTIVE_TO IS NULL OR mo.EFFECTIVE_TO > CURRENT_TIMESTAMP()) 
          THEN pt.PARTY_NAME END, ', ') WITHIN GROUP (ORDER BY pt.PARTY_NAME) AS OWNERS,
  -- Current stewards
  LISTAGG(DISTINCT CASE WHEN mo.ROLE_TYPE = 'STEWARD' AND (mo.EFFECTIVE_TO IS NULL OR mo.EFFECTIVE_TO > CURRENT_TIMESTAMP()) 
          THEN pt.PARTY_NAME END, ', ') WITHIN GROUP (ORDER BY pt.PARTY_NAME) AS STEWARDS,
  -- Contact emails for owners
  LISTAGG(DISTINCT CASE WHEN mo.ROLE_TYPE = 'OWNER' AND (mo.EFFECTIVE_TO IS NULL OR mo.EFFECTIVE_TO > CURRENT_TIMESTAMP()) 
          THEN pt.EMAIL END, ', ') WITHIN GROUP (ORDER BY pt.EMAIL) AS OWNER_EMAILS
FROM GOV_PLATFORM.CATALOG.DIM_DATASET ds
LEFT JOIN GOV_PLATFORM.CATALOG.DIM_DOMAIN d ON d.DOMAIN_ID = ds.DOMAIN_ID
LEFT JOIN GOV_PLATFORM.OWNERSHIP.MAP_DATASET_OWNER mo ON mo.DATASET_ID = ds.DATASET_ID
LEFT JOIN GOV_PLATFORM.OWNERSHIP.DIM_PARTY pt ON pt.PARTY_ID = mo.PARTY_ID
GROUP BY ds.DATASET_ID, ds.DATABASE_NAME, ds.SCHEMA_NAME, ds.OBJECT_NAME, ds.DESCRIPTION, d.DOMAIN_NAME;

-- Lineage view for upstream/downstream analysis
CREATE OR REPLACE SECURE VIEW VW_LINEAGE_EDGES AS
SELECT
  le.EDGE_ID,
  le.EDGE_TYPE,
  le.LOGIC_REF,
  le.ACTIVE_FLAG,
  -- Source node details
  ln_src.NODE_TYPE AS SRC_NODE_TYPE,
  ln_src.NAME AS SRC_NAME,
  CASE 
    WHEN ln_src.NODE_TYPE = 'DATASET' THEN 
      CONCAT(ds_src.DATABASE_NAME, '.', ds_src.SCHEMA_NAME, '.', ds_src.OBJECT_NAME)
    ELSE ln_src.NAME
  END AS SRC_FULL_NAME,
  -- Target node details
  ln_tgt.NODE_TYPE AS TGT_NODE_TYPE,
  ln_tgt.NAME AS TGT_NAME,
  CASE 
    WHEN ln_tgt.NODE_TYPE = 'DATASET' THEN 
      CONCAT(ds_tgt.DATABASE_NAME, '.', ds_tgt.SCHEMA_NAME, '.', ds_tgt.OBJECT_NAME)
    ELSE ln_tgt.NAME
  END AS TGT_FULL_NAME,
  -- Domain information
  d_src.DOMAIN_NAME AS SRC_DOMAIN,
  d_tgt.DOMAIN_NAME AS TGT_DOMAIN
FROM GOV_PLATFORM.LINEAGE.LINEAGE_EDGE le
JOIN GOV_PLATFORM.LINEAGE.LINEAGE_NODE ln_src ON ln_src.NODE_ID = le.SRC_NODE_ID
JOIN GOV_PLATFORM.LINEAGE.LINEAGE_NODE ln_tgt ON ln_tgt.NODE_ID = le.TGT_NODE_ID
LEFT JOIN GOV_PLATFORM.CATALOG.DIM_DATASET ds_src ON ds_src.DATASET_ID = ln_src.REF_ID AND ln_src.NODE_TYPE = 'DATASET'
LEFT JOIN GOV_PLATFORM.CATALOG.DIM_DATASET ds_tgt ON ds_tgt.DATASET_ID = ln_tgt.REF_ID AND ln_tgt.NODE_TYPE = 'DATASET'
LEFT JOIN GOV_PLATFORM.CATALOG.DIM_DOMAIN d_src ON d_src.DOMAIN_ID = ds_src.DOMAIN_ID
LEFT JOIN GOV_PLATFORM.CATALOG.DIM_DOMAIN d_tgt ON d_tgt.DOMAIN_ID = ds_tgt.DOMAIN_ID
WHERE le.ACTIVE_FLAG = TRUE;

-- Business glossary with usage statistics
CREATE OR REPLACE SECURE VIEW VW_BUSINESS_GLOSSARY AS
SELECT
  t.TERM_ID,
  t.TERM_NAME,
  t.DEFINITION,
  t.STATUS,
  d.DOMAIN_NAME,
  -- Steward information
  pt.PARTY_NAME AS STEWARD_NAME,
  pt.EMAIL AS STEWARD_EMAIL,
  -- Usage statistics
  COUNT(DISTINCT ma.DATASET_ID) AS DATASETS_USING_TERM,
  COUNT(DISTINCT CASE WHEN ma.CDE_ID IS NOT NULL THEN ma.MAP_ID END) AS CDE_MAPPINGS,
  -- Related CDEs
  LISTAGG(DISTINCT c.NAME, ', ') WITHIN GROUP (ORDER BY c.NAME) AS RELATED_CDES
FROM GOV_PLATFORM.CATALOG.DIM_TERM t
LEFT JOIN GOV_PLATFORM.CATALOG.DIM_DOMAIN d ON d.DOMAIN_ID = t.DOMAIN_ID
LEFT JOIN GOV_PLATFORM.OWNERSHIP.DIM_PARTY pt ON pt.PARTY_ID = t.STEWARD_PARTY_ID
LEFT JOIN GOV_PLATFORM.CATALOG.MAP_DATASET_ATTRIBUTE ma ON ma.TERM_ID = t.TERM_ID
LEFT JOIN GOV_PLATFORM.CATALOG.DIM_CDE c ON c.CDE_ID = ma.CDE_ID
GROUP BY t.TERM_ID, t.TERM_NAME, t.DEFINITION, t.STATUS, d.DOMAIN_NAME, pt.PARTY_NAME, pt.EMAIL;

-- Data contracts with SLA monitoring
CREATE OR REPLACE SECURE VIEW VW_DATA_CONTRACTS AS
SELECT
  dc.CONTRACT_ID,
  dc.VERSION,
  dc.STATUS,
  dc.EFFECTIVE_FROM,
  dc.EFFECTIVE_TO,
  -- Dataset information
  ds.DATABASE_NAME,
  ds.SCHEMA_NAME,
  ds.OBJECT_NAME,
  d.DOMAIN_NAME,
  -- Parties
  prod.PARTY_NAME AS PRODUCER,
  prod.EMAIL AS PRODUCER_EMAIL,
  cons.PARTY_NAME AS CONSUMER,
  cons.EMAIL AS CONSUMER_EMAIL,
  -- Contract details (assuming JSON structure)
  dc.CONTRACT_JSON:schema::STRING AS SCHEMA_VERSION,
  dc.CONTRACT_JSON:sla:availability::NUMBER AS SLA_AVAILABILITY_PCT,
  dc.CONTRACT_JSON:sla:freshness_hours::NUMBER AS SLA_FRESHNESS_HOURS,
  dc.CONTRACT_JSON:quality:completeness_threshold::NUMBER AS QUALITY_COMPLETENESS_THRESHOLD
FROM GOV_PLATFORM.GOVERNANCE.DATA_CONTRACT dc
JOIN GOV_PLATFORM.CATALOG.DIM_DATASET ds ON ds.DATASET_ID = dc.DATASET_ID
LEFT JOIN GOV_PLATFORM.CATALOG.DIM_DOMAIN d ON d.DOMAIN_ID = ds.DOMAIN_ID
LEFT JOIN GOV_PLATFORM.OWNERSHIP.DIM_PARTY prod ON prod.PARTY_ID = dc.PRODUCER_PARTY_ID
LEFT JOIN GOV_PLATFORM.OWNERSHIP.DIM_PARTY cons ON cons.PARTY_ID = dc.CONSUMER_PARTY_ID;

-- Risk and compliance dashboard view
CREATE OR REPLACE SECURE VIEW VW_RISK_DASHBOARD AS
SELECT
  ri.RISK_ID,
  ri.TITLE,
  ri.CATEGORY,
  ri.SEVERITY,
  ri.LIKELIHOOD,
  ri.IMPACT,
  ri.STATUS,
  -- Owner information
  pt.PARTY_NAME AS RISK_OWNER,
  pt.EMAIL AS OWNER_EMAIL,
  -- Related controls count
  COUNT(DISTINCT cr.CONTROL_ID) AS RELATED_CONTROLS,
  -- Recent control test results
  COUNT(DISTINCT CASE WHEN ct.OUTCOME = 'PASS' AND ct.EXECUTED_AT >= DATEADD('day', -30, CURRENT_DATE()) 
        THEN ct.TEST_ID END) AS RECENT_CONTROL_PASSES,
  COUNT(DISTINCT CASE WHEN ct.OUTCOME = 'FAIL' AND ct.EXECUTED_AT >= DATEADD('day', -30, CURRENT_DATE()) 
        THEN ct.TEST_ID END) AS RECENT_CONTROL_FAILS
FROM GOV_PLATFORM.RISK.RISK_ITEM ri
LEFT JOIN GOV_PLATFORM.OWNERSHIP.DIM_PARTY pt ON pt.PARTY_ID = ri.OWNER_PARTY_ID
LEFT JOIN GOV_PLATFORM.GOVERNANCE.CONTROL_REGISTRY cr ON cr.SCOPE_TYPE = 'RISK' AND cr.SCOPE_ID = ri.RISK_ID
LEFT JOIN GOV_PLATFORM.RISK.CONTROL_TEST ct ON ct.CONTROL_ID = cr.CONTROL_ID
GROUP BY ri.RISK_ID, ri.TITLE, ri.CATEGORY, ri.SEVERITY, ri.LIKELIHOOD, ri.IMPACT, ri.STATUS, pt.PARTY_NAME, pt.EMAIL;
