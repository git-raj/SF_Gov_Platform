-- ====================================================================
-- APP LAYER PATCH (Views, Policies, Config Inserts)
-- Safe to run multiple times. Adjust role/db/schema names as needed.
-- ====================================================================

-- --- Context ----------------------------------------------------------
USE ROLE ACCOUNTADMIN;
USE DATABASE GOV_APP;

-- Ensure schemas exist
CREATE SCHEMA IF NOT EXISTS GOV_APP.POLICIES;
CREATE SCHEMA IF NOT EXISTS GOV_APP.VIEWS;
CREATE SCHEMA IF NOT EXISTS GOV_APP.CONFIG;

-- ====================================================================
-- A) ROW ACCESS POLICY (combined for domain + classification)
-- ====================================================================
USE SCHEMA GOV_APP.POLICIES;

CREATE OR REPLACE ROW ACCESS POLICY ROW_ACCESS_GOVERNANCE
AS (DOMAIN_NAME STRING, CLASSIFICATION STRING) RETURNS BOOLEAN ->
  CASE
    -- Full access roles (adjust for your environment)
    WHEN CURRENT_ROLE() IN ('GOVERNANCE_ADMIN','AUDIT_ROLE','DATA_STEWARD','GOVERNANCE_ANALYST') THEN TRUE

    -- Domain-scoped analyst roles (match your DIM_DOMAIN names)
    WHEN CURRENT_ROLE() = 'RETAIL_DATA_ANALYST'   AND (DOMAIN_NAME ILIKE 'RETAIL%'  OR DOMAIN_NAME ILIKE 'DEPOSIT%') THEN TRUE
    WHEN CURRENT_ROLE() = 'LENDING_DATA_ANALYST'  AND (DOMAIN_NAME ILIKE 'LENDING%') THEN TRUE
    WHEN CURRENT_ROLE() = 'CARDS_DATA_ANALYST'    AND (DOMAIN_NAME ILIKE 'CARDS%')   THEN TRUE
    WHEN CURRENT_ROLE() = 'TREASURY_DATA_ANALYST' AND (DOMAIN_NAME ILIKE 'TREASURY%') THEN TRUE

    -- Classification tiers (aligns to GOVERNANCE.CLASSIFICATION)
    WHEN CLASSIFICATION IN ('Public','Internal') THEN TRUE
    WHEN CLASSIFICATION = 'Confidential' AND CURRENT_ROLE() IN ('DATA_STEWARD','GOVERNANCE_ANALYST','GOVERNANCE_ADMIN') THEN TRUE
    WHEN CLASSIFICATION = 'PII' AND CURRENT_ROLE() IN ('GOVERNANCE_ADMIN','DATA_STEWARD','PRIVACY_OFFICER') THEN TRUE
    WHEN CLASSIFICATION = 'PCI' AND CURRENT_ROLE() IN ('GOVERNANCE_ADMIN','PCI_ANALYST') THEN TRUE

    ELSE FALSE
  END;

-- ====================================================================
-- B) MASKING POLICIES (use LENGTH() and consistent behavior)
-- ====================================================================
CREATE OR REPLACE MASKING POLICY MASK_SENSITIVE_SAMPLES AS (VAL STRING) RETURNS STRING ->
  CASE 
    WHEN CURRENT_ROLE() IN ('GOVERNANCE_ADMIN','DATA_STEWARD','AUDIT_ROLE') THEN VAL
    WHEN VAL IS NULL THEN NULL
    WHEN LENGTH(VAL) > 10 THEN CONCAT(LEFT(VAL, 3), '*****', RIGHT(VAL, 2))
    ELSE '***MASKED***'
  END;

CREATE OR REPLACE MASKING POLICY MASK_EMAIL AS (VAL STRING) RETURNS STRING ->
  CASE 
    WHEN CURRENT_ROLE() IN ('GOVERNANCE_ADMIN','DATA_STEWARD') THEN VAL
    WHEN VAL IS NULL THEN NULL
    ELSE CONCAT('***', SPLIT_PART(VAL, '@', 2))
  END;

-- Optional evidence ref mask
CREATE OR REPLACE MASKING POLICY MASK_EVIDENCE_REF AS (VAL STRING) RETURNS STRING ->
  CASE 
    WHEN CURRENT_ROLE() IN ('GOVERNANCE_ADMIN','AUDIT_ROLE') THEN VAL
    WHEN VAL IS NULL THEN NULL
    ELSE 'evidence://masked'
  END;

-- ====================================================================
-- C) VIEWS (secure; re-created to avoid stale policy attachments)
-- ====================================================================
USE SCHEMA GOV_APP.VIEWS;

-- VW_TODAY_HEALTH (sample: join latest runs + outcomes)
CREATE OR REPLACE SECURE VIEW VW_TODAY_HEALTH AS
WITH latest_dq AS (
  SELECT
    RES.DATASET_ID,
    RES.RULE_ID,
    RES.OUTCOME,
    RES.METRICS_SUMMARY,
    R.STARTED_AT,
    ROW_NUMBER() OVER (PARTITION BY RES.RULE_ID ORDER BY R.STARTED_AT DESC) AS RN
  FROM GOV_PLATFORM.QUALITY.DQ_RESULT RES
  JOIN GOV_PLATFORM.QUALITY.DQ_RUN R ON R.RUN_ID = RES.RUN_ID
)
SELECT
  DS.DATASET_ID,
  DS.DOMAIN_ID         AS DOMAIN_NAME,
  DS.CLASSIFICATION,
  DS.CERTIFICATION,
  L.STARTED_AT         AS LAST_DQ_RUN_AT,
  L.OUTCOME            AS LAST_DQ_OUTCOME
FROM GOV_PLATFORM.CATALOG.DIM_DATASET DS
LEFT JOIN latest_dq L ON L.DATASET_ID = DS.DATASET_ID AND L.RN = 1;

-- VW_DQ_RESULTS_ENRICHED
CREATE OR REPLACE SECURE VIEW VW_DQ_RESULTS_ENRICHED AS
SELECT
  RES.RUN_ID,
  RES.RULE_ID,
  RES.DATASET_ID,
  RES.OUTCOME,
  RES.METRICS_SUMMARY,
  RES.EVIDENCE_REF,
  DS.DOMAIN_ID AS DOMAIN_NAME,
  DS.CLASSIFICATION,
  R.STARTED_AT,
  R.ENDED_AT,
  RULE.RULE_NAME,
  RULE.SEVERITY,
  P.PARTY_NAME AS OWNER_NAME,
  P.EMAIL      AS OWNER_EMAIL
FROM GOV_PLATFORM.QUALITY.DQ_RESULT RES
JOIN GOV_PLATFORM.QUALITY.DQ_RUN R             ON R.RUN_ID = RES.RUN_ID
LEFT JOIN GOV_PLATFORM.CATALOG.DIM_DATASET DS  ON DS.DATASET_ID = RES.DATASET_ID
LEFT JOIN GOV_PLATFORM.QUALITY.DQ_RULE RULE    ON RULE.RULE_ID = RES.RULE_ID
LEFT JOIN GOV_PLATFORM.OWNERSHIP.DIM_PARTY P   ON P.PARTY_ID = RULE.OWNER_PARTY_ID;

-- VW_CONTROL_RESULTS_ENRICHED (meta-level example)
CREATE OR REPLACE SECURE VIEW VW_CONTROL_RESULTS_ENRICHED AS
SELECT
  T.TEST_ID,
  T.CONTROL_ID,
  C.CONTROL_NAME,
  C.SEVERITY,
  T.RUN_ID,
  T.EXECUTED_AT,
  T.OUTCOME,
  T.DETAILS,
  C.SCOPE_TYPE,
  C.SCOPE_ID,
  P.PARTY_NAME AS OWNER_NAME,
  P.EMAIL      AS OWNER_EMAIL
FROM GOV_PLATFORM.RISK.CONTROL_TEST T
LEFT JOIN GOV_PLATFORM.GOVERNANCE.CONTROL_REGISTRY C ON C.CONTROL_ID = T.CONTROL_ID
LEFT JOIN GOV_PLATFORM.OWNERSHIP.DIM_PARTY P         ON P.PARTY_ID   = C.OWNER_PARTY_ID;

-- VW_DATASET_OWNERS
CREATE OR REPLACE SECURE VIEW VW_DATASET_OWNERS AS
SELECT
  DS.DATASET_ID,
  DS.DOMAIN_ID AS DOMAIN_NAME,
  DS.CLASSIFICATION,
  LISTAGG(DISTINCT CONCAT(P.PARTY_NAME, ' <', P.EMAIL, '>'), '; ') AS OWNER_EMAILS
FROM GOV_PLATFORM.CATALOG.DIM_DATASET DS
LEFT JOIN GOV_PLATFORM.OWNERSHIP.MAP_DATASET_OWNER M ON M.DATASET_ID = DS.DATASET_ID
LEFT JOIN GOV_PLATFORM.OWNERSHIP.DIM_PARTY P         ON P.PARTY_ID   = M.PARTY_ID
GROUP BY 1,2,3;

-- VW_BUSINESS_GLOSSARY
CREATE OR REPLACE SECURE VIEW VW_BUSINESS_GLOSSARY AS
SELECT
  T.TERM_ID,
  T.TERM_NAME,
  T.DEFINITION,
  D.DOMAIN_ID AS DOMAIN_NAME,
  S.PARTY_NAME AS STEWARD_NAME,
  S.EMAIL      AS STEWARD_EMAIL,
  T.STATUS
FROM GOV_PLATFORM.CATALOG.DIM_TERM T
LEFT JOIN GOV_PLATFORM.CATALOG.DIM_DOMAIN D    ON D.DOMAIN_ID = T.DOMAIN_ID
LEFT JOIN GOV_PLATFORM.OWNERSHIP.DIM_PARTY S   ON S.PARTY_ID  = T.STEWARD_PARTY_ID;

-- VW_DATA_CONTRACTS
CREATE OR REPLACE SECURE VIEW VW_DATA_CONTRACTS AS
SELECT
  C.CONTRACT_ID,
  C.DATASET_ID,
  DS.DOMAIN_ID AS DOMAIN_NAME,
  DS.CLASSIFICATION,
  C.VERSION,
  C.STATUS,
  PROD.PARTY_NAME AS PRODUCER_NAME,
  PROD.EMAIL      AS PRODUCER_EMAIL,
  CONS.PARTY_NAME AS CONSUMER_NAME,
  CONS.EMAIL      AS CONSUMER_EMAIL
FROM GOV_PLATFORM.GOVERNANCE.DATA_CONTRACT C
LEFT JOIN GOV_PLATFORM.CATALOG.DIM_DATASET DS ON DS.DATASET_ID = C.DATASET_ID
LEFT JOIN GOV_PLATFORM.OWNERSHIP.DIM_PARTY PROD ON PROD.PARTY_ID = C.PRODUCER_PARTY_ID
LEFT JOIN GOV_PLATFORM.OWNERSHIP.DIM_PARTY CONS ON CONS.PARTY_ID = C.CONSUMER_PARTY_ID;

-- VW_RISK_DASHBOARD (no invalid SCOPE_TYPE joins)
CREATE OR REPLACE SECURE VIEW VW_RISK_DASHBOARD AS
SELECT
  RI.RISK_ID,
  RI.TITLE,
  RI.CATEGORY,
  RI.SEVERITY,
  RI.LIKELIHOOD,
  RI.IMPACT,
  RI.STATUS,
  P.PARTY_NAME AS RISK_OWNER,
  P.EMAIL      AS OWNER_EMAIL
FROM GOV_PLATFORM.RISK.RISK_ITEM RI
LEFT JOIN GOV_PLATFORM.OWNERSHIP.DIM_PARTY P ON P.PARTY_ID = RI.OWNER_PARTY_ID;

-- ====================================================================
-- D) ATTACH POLICIES (Row access + masking)
-- ====================================================================

-- Row access: attach once per view; pass (DOMAIN_NAME, CLASSIFICATION) or (DOMAIN_NAME, NULL) if not present
ALTER VIEW GOV_APP.VIEWS.VW_TODAY_HEALTH
  ADD ROW ACCESS POLICY GOV_APP.POLICIES.ROW_ACCESS_GOVERNANCE ON (DOMAIN_NAME, CLASSIFICATION);

ALTER VIEW GOV_APP.VIEWS.VW_DQ_RESULTS_ENRICHED
  ADD ROW ACCESS POLICY GOV_APP.POLICIES.ROW_ACCESS_GOVERNANCE ON (DOMAIN_NAME, CLASSIFICATION);

ALTER VIEW GOV_APP.VIEWS.VW_CONTROL_RESULTS_ENRICHED
  ADD ROW ACCESS POLICY GOV_APP.POLICIES.ROW_ACCESS_GOVERNANCE ON (NULL, NULL);

ALTER VIEW GOV_APP.VIEWS.VW_DATASET_OWNERS
  ADD ROW ACCESS POLICY GOV_APP.POLICIES.ROW_ACCESS_GOVERNANCE ON (DOMAIN_NAME, CLASSIFICATION);

ALTER VIEW GOV_APP.VIEWS.VW_BUSINESS_GLOSSARY
  ADD ROW ACCESS POLICY GOV_APP.POLICIES.ROW_ACCESS_GOVERNANCE ON (DOMAIN_NAME, NULL);

ALTER VIEW GOV_APP.VIEWS.VW_DATA_CONTRACTS
  ADD ROW ACCESS POLICY GOV_APP.POLICIES.ROW_ACCESS_GOVERNANCE ON (DOMAIN_NAME, CLASSIFICATION);

ALTER VIEW GOV_APP.VIEWS.VW_RISK_DASHBOARD
  ADD ROW ACCESS POLICY GOV_APP.POLICIES.ROW_ACCESS_GOVERNANCE ON (NULL, NULL);

-- Masking: apply where applicable
ALTER VIEW GOV_APP.VIEWS.VW_DQ_RESULTS_ENRICHED MODIFY COLUMN EVIDENCE_REF  SET MASKING POLICY GOV_APP.POLICIES.MASK_EVIDENCE_REF;
ALTER VIEW GOV_APP.VIEWS.VW_DQ_RESULTS_ENRICHED MODIFY COLUMN OWNER_EMAIL   SET MASKING POLICY GOV_APP.POLICIES.MASK_EMAIL;
ALTER VIEW GOV_APP.VIEWS.VW_CONTROL_RESULTS_ENRICHED MODIFY COLUMN OWNER_EMAIL SET MASKING POLICY GOV_APP.POLICIES.MASK_EMAIL;
ALTER VIEW GOV_APP.VIEWS.VW_DATASET_OWNERS MODIFY COLUMN OWNER_EMAILS       SET MASKING POLICY GOV_APP.POLICIES.MASK_EMAIL;
ALTER VIEW GOV_APP.VIEWS.VW_BUSINESS_GLOSSARY MODIFY COLUMN STEWARD_EMAIL   SET MASKING POLICY GOV_APP.POLICIES.MASK_EMAIL;
ALTER VIEW GOV_APP.VIEWS.VW_DATA_CONTRACTS MODIFY COLUMN PRODUCER_EMAIL     SET MASKING POLICY GOV_APP.POLICIES.MASK_EMAIL;
ALTER VIEW GOV_APP.VIEWS.VW_DATA_CONTRACTS MODIFY COLUMN CONSUMER_EMAIL     SET MASKING POLICY GOV_APP.POLICIES.MASK_EMAIL;
ALTER VIEW GOV_APP.VIEWS.VW_RISK_DASHBOARD MODIFY COLUMN OWNER_EMAIL        SET MASKING POLICY GOV_APP.POLICIES.MASK_EMAIL;

-- ====================================================================
-- E) CONFIG INSERTS (safe constructors + UNION ALL)
--     Run if you need seed data for feature flags and page access.
-- ====================================================================
USE SCHEMA GOV_APP.CONFIG;

-- APP_FEATURE_FLAG (FEATURE_NAME, ENABLED, DESCRIPTION, ROLES_ALLOWED, CONFIG_JSON)
CREATE TABLE IF NOT EXISTS APP_FEATURE_FLAG (
  FEATURE_NAME STRING PRIMARY KEY,
  ENABLED BOOLEAN,
  DESCRIPTION STRING,
  ROLES_ALLOWED ARRAY,
  CONFIG_JSON VARIANT,
  CREATED_AT TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP()
);

INSERT INTO APP_FEATURE_FLAG (FEATURE_NAME, ENABLED, DESCRIPTION, ROLES_ALLOWED, CONFIG_JSON)
SELECT 'TODAY_HEALTH_DASHBOARD', TRUE, 'Today''s health dashboard with real-time metrics',
       ARRAY_CONSTRUCT('GOVERNANCE_ADMIN','DATA_STEWARD','GOVERNANCE_ANALYST'),
       OBJECT_CONSTRUCT('refresh_interval_seconds', 300, 'max_rows_display', 1000)
UNION ALL
SELECT 'DQ_RESULTS_EXPLORER', TRUE, 'Data quality results exploration and drill-down',
       ARRAY_CONSTRUCT('GOVERNANCE_ADMIN','DATA_STEWARD','GOVERNANCE_ANALYST'),
       OBJECT_CONSTRUCT('enable_evidence_links', TRUE, 'max_export_rows', 10000)
UNION ALL
SELECT 'RISK_DASHBOARD', TRUE, 'Risk register overview for governance users',
       ARRAY_CONSTRUCT('GOVERNANCE_ADMIN','DATA_STEWARD','GOVERNANCE_ANALYST','AUDIT_ROLE'),
       OBJECT_CONSTRUCT('severity_order', ARRAY_CONSTRUCT('CRITICAL','HIGH','MEDIUM','LOW'));

-- ROLE_PAGE_ACCESS (ROLE_NAME, PAGE_NAME, ACCESS_LEVEL)
CREATE TABLE IF NOT EXISTS ROLE_PAGE_ACCESS (
  ROLE_NAME STRING,
  PAGE_NAME STRING,
  ACCESS_LEVEL STRING,
  CREATED_AT TIMESTAMP_TZ DEFAULT CURRENT_TIMESTAMP()
);

-- Basic defaults (idempotent upsert-like pattern)
MERGE INTO ROLE_PAGE_ACCESS tgt
USING (
  SELECT 'GOVERNANCE_ADMIN' AS ROLE_NAME, 'HOME' AS PAGE_NAME, 'ALLOW' AS ACCESS_LEVEL UNION ALL
  SELECT 'DATA_STEWARD',     'HOME', 'ALLOW' UNION ALL
  SELECT 'GOVERNANCE_ANALYST','HOME', 'ALLOW' UNION ALL
  SELECT 'ANALYST',          'HOME', 'ALLOW'
) src
ON UPPER(tgt.ROLE_NAME)=UPPER(src.ROLE_NAME) AND UPPER(tgt.PAGE_NAME)=UPPER(src.PAGE_NAME)
WHEN MATCHED THEN UPDATE SET ACCESS_LEVEL = src.ACCESS_LEVEL
WHEN NOT MATCHED THEN INSERT (ROLE_NAME, PAGE_NAME, ACCESS_LEVEL) VALUES (src.ROLE_NAME, src.PAGE_NAME, src.ACCESS_LEVEL);

-- Done.
